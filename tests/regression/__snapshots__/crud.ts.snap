// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`crud should properly generate actions resolver classes for prisma model: CreateManyUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { CreateManyUserArgs } from \\"./args/CreateManyUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class CreateManyUserResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: CreateOneUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { CreateUserArgs } from \\"./args/CreateUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class CreateUserResolver {
  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async createUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: DeleteManyUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { DeleteManyUserArgs } from \\"./args/DeleteManyUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class DeleteManyUserResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: DeleteUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { DeleteUserArgs } from \\"./args/DeleteUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class DeleteUserResolver {
  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async deleteUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: FindFirstUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindFirstUserArgs } from \\"./args/FindFirstUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class FindFirstUserResolver {
  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async findFirstUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: FindManyUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindManyUserArgs } from \\"./args/FindManyUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class FindManyUserResolver {
  @TypeGraphQL.Query(_returns => [User], {
    nullable: false
  })
  async users(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyUserArgs): Promise<User[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: FindUniqueUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindUniqueUserArgs } from \\"./args/FindUniqueUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class FindUniqueUserResolver {
  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async user(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: GroupByUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { GroupByUserArgs } from \\"./args/GroupByUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { UserGroupBy } from \\"../../outputs/UserGroupBy.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class GroupByUserResolver {
  @TypeGraphQL.Query(_returns => [UserGroupBy], {
    nullable: false
  })
  async groupByUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByUserArgs): Promise<UserGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: Index 1`] = `
"export * from \\"./resolvers-actions.index\\";
export * from \\"./resolvers-crud.index\\";
export * from \\"./args.index\\";
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: UpdateManyUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpdateManyUserArgs } from \\"./args/UpdateManyUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class UpdateManyUserResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: UpdateUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpdateUserArgs } from \\"./args/UpdateUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class UpdateUserResolver {
  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async updateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: UpsertUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpsertUserArgs } from \\"./args/UpsertUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class UpsertUserResolver {
  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async upsertUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: actionsIndex 1`] = `
"export { FindUniqueUserResolver } from \\"./User/FindUniqueUserResolver\\";
export { FindFirstUserResolver } from \\"./User/FindFirstUserResolver\\";
export { FindManyUserResolver } from \\"./User/FindManyUserResolver\\";
export { CreateUserResolver } from \\"./User/CreateUserResolver\\";
export { CreateManyUserResolver } from \\"./User/CreateManyUserResolver\\";
export { DeleteUserResolver } from \\"./User/DeleteUserResolver\\";
export { UpdateUserResolver } from \\"./User/UpdateUserResolver\\";
export { DeleteManyUserResolver } from \\"./User/DeleteManyUserResolver\\";
export { UpdateManyUserResolver } from \\"./User/UpdateManyUserResolver\\";
export { UpsertUserResolver } from \\"./User/UpsertUserResolver\\";
export { AggregateUserResolver } from \\"./User/AggregateUserResolver\\";
export { GroupByUserResolver } from \\"./User/GroupByUserResolver\\";
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: argsIndex 1`] = `
"export * from \\"./User/args\\";
"
`;

exports[`crud should properly generate actions resolver classes for prisma model: crudIndex 1`] = `
"export { UserCrudResolver } from \\"./User/UserCrudResolver\\";
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: AggregateUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class AggregateUserArgs {
  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;

  @TypeGraphQL.Field(_type => [UserOrderByInput], {
    nullable: true
  })
  orderBy?: UserOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  cursor?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: CreateManyUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserCreateManyInput } from \\"../../../inputs/UserCreateManyInput.input\\";

@TypeGraphQL.ArgsType()
export class CreateManyUserArgs {
  @TypeGraphQL.Field(_type => [UserCreateManyInput], {
    nullable: false
  })
  data!: UserCreateManyInput[];

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  skipDuplicates?: boolean | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: CreateUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserCreateInput } from \\"../../../inputs/UserCreateInput.input\\";

@TypeGraphQL.ArgsType()
export class CreateUserArgs {
  @TypeGraphQL.Field(_type => UserCreateInput, {
    nullable: false
  })
  data!: UserCreateInput;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: DeleteManyUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";

@TypeGraphQL.ArgsType()
export class DeleteManyUserArgs {
  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: DeleteUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class DeleteUserArgs {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: FindFirstUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";
import { UserScalarFieldEnum } from \\"../../../../enums/UserScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindFirstUserArgs {
  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;

  @TypeGraphQL.Field(_type => [UserOrderByInput], {
    nullable: true
  })
  orderBy?: UserOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  cursor?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [UserScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\"> | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: FindManyUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";
import { UserScalarFieldEnum } from \\"../../../../enums/UserScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindManyUserArgs {
  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;

  @TypeGraphQL.Field(_type => [UserOrderByInput], {
    nullable: true
  })
  orderBy?: UserOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  cursor?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [UserScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\"> | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: FindUniqueUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class FindUniqueUserArgs {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: GroupByUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserOrderByInput } from \\"../../../inputs/UserOrderByInput.input\\";
import { UserScalarWhereWithAggregatesInput } from \\"../../../inputs/UserScalarWhereWithAggregatesInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";
import { UserScalarFieldEnum } from \\"../../../../enums/UserScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class GroupByUserArgs {
  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;

  @TypeGraphQL.Field(_type => [UserOrderByInput], {
    nullable: true
  })
  orderBy?: UserOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => [UserScalarFieldEnum], {
    nullable: false
  })
  by!: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\">;

  @TypeGraphQL.Field(_type => UserScalarWhereWithAggregatesInput, {
    nullable: true
  })
  having?: UserScalarWhereWithAggregatesInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: Index 1`] = `
"export { AggregateUserArgs } from \\"./AggregateUserArgs.arg\\";
export { CreateManyUserArgs } from \\"./CreateManyUserArgs.arg\\";
export { CreateUserArgs } from \\"./CreateUserArgs.arg\\";
export { DeleteManyUserArgs } from \\"./DeleteManyUserArgs.arg\\";
export { DeleteUserArgs } from \\"./DeleteUserArgs.arg\\";
export { FindFirstUserArgs } from \\"./FindFirstUserArgs.arg\\";
export { FindManyUserArgs } from \\"./FindManyUserArgs.arg\\";
export { FindUniqueUserArgs } from \\"./FindUniqueUserArgs.arg\\";
export { GroupByUserArgs } from \\"./GroupByUserArgs.arg\\";
export { UpdateManyUserArgs } from \\"./UpdateManyUserArgs.arg\\";
export { UpdateUserArgs } from \\"./UpdateUserArgs.arg\\";
export { UpsertUserArgs } from \\"./UpsertUserArgs.arg\\";
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: UpdateManyUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUpdateManyMutationInput } from \\"../../../inputs/UserUpdateManyMutationInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateManyUserArgs {
  @TypeGraphQL.Field(_type => UserUpdateManyMutationInput, {
    nullable: false
  })
  data!: UserUpdateManyMutationInput;

  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: UpdateUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUpdateInput } from \\"../../../inputs/UserUpdateInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateUserArgs {
  @TypeGraphQL.Field(_type => UserUpdateInput, {
    nullable: false
  })
  data!: UserUpdateInput;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;
}
"
`;

exports[`crud should properly generate args classes for every method of crud resolver: UpsertUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserCreateInput } from \\"../../../inputs/UserCreateInput.input\\";
import { UserUpdateInput } from \\"../../../inputs/UserUpdateInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpsertUserArgs {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;

  @TypeGraphQL.Field(_type => UserCreateInput, {
    nullable: false
  })
  create!: UserCreateInput;

  @TypeGraphQL.Field(_type => UserUpdateInput, {
    nullable: false
  })
  update!: UserUpdateInput;
}
"
`;

exports[`crud should properly generate resolver class for single prisma model: Index 1`] = `
"export * from \\"./resolvers-actions.index\\";
export * from \\"./resolvers-crud.index\\";
export * from \\"./args.index\\";
"
`;

exports[`crud should properly generate resolver class for single prisma model: UserCrudResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { AggregateUserArgs } from \\"./args/AggregateUserArgs.arg\\";
import { CreateManyUserArgs } from \\"./args/CreateManyUserArgs.arg\\";
import { CreateUserArgs } from \\"./args/CreateUserArgs.arg\\";
import { DeleteManyUserArgs } from \\"./args/DeleteManyUserArgs.arg\\";
import { DeleteUserArgs } from \\"./args/DeleteUserArgs.arg\\";
import { FindFirstUserArgs } from \\"./args/FindFirstUserArgs.arg\\";
import { FindManyUserArgs } from \\"./args/FindManyUserArgs.arg\\";
import { FindUniqueUserArgs } from \\"./args/FindUniqueUserArgs.arg\\";
import { GroupByUserArgs } from \\"./args/GroupByUserArgs.arg\\";
import { UpdateManyUserArgs } from \\"./args/UpdateManyUserArgs.arg\\";
import { UpdateUserArgs } from \\"./args/UpdateUserArgs.arg\\";
import { UpsertUserArgs } from \\"./args/UpsertUserArgs.arg\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";
import { User } from \\"../../../models/User.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { AggregateUser } from \\"../../outputs/AggregateUser.output\\";
import { UserGroupBy } from \\"../../outputs/UserGroupBy.output\\";

@TypeGraphQL.Resolver(_of => User)
export class UserCrudResolver {
  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async user(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async findFirstUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => [User], {
    nullable: false
  })
  async users(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyUserArgs): Promise<User[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async createUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async deleteUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async updateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async upsertUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => AggregateUser, {
    nullable: false
  })
  async aggregateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateUserArgs): Promise<AggregateUser> {
    return getPrismaFromContext(ctx).user.aggregate({
      ...args,
      ...transformFields(graphqlFields(info as any)),
    });
  }

  @TypeGraphQL.Query(_returns => [UserGroupBy], {
    nullable: false
  })
  async groupByUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByUserArgs): Promise<UserGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud should properly generate resolver class for single prisma model: actionsIndex 1`] = `
"export { FindUniqueUserResolver } from \\"./User/FindUniqueUserResolver\\";
export { FindFirstUserResolver } from \\"./User/FindFirstUserResolver\\";
export { FindManyUserResolver } from \\"./User/FindManyUserResolver\\";
export { CreateUserResolver } from \\"./User/CreateUserResolver\\";
export { CreateManyUserResolver } from \\"./User/CreateManyUserResolver\\";
export { DeleteUserResolver } from \\"./User/DeleteUserResolver\\";
export { UpdateUserResolver } from \\"./User/UpdateUserResolver\\";
export { DeleteManyUserResolver } from \\"./User/DeleteManyUserResolver\\";
export { UpdateManyUserResolver } from \\"./User/UpdateManyUserResolver\\";
export { UpsertUserResolver } from \\"./User/UpsertUserResolver\\";
export { AggregateUserResolver } from \\"./User/AggregateUserResolver\\";
export { GroupByUserResolver } from \\"./User/GroupByUserResolver\\";
"
`;

exports[`crud should properly generate resolver class for single prisma model: argsIndex 1`] = `
"export * from \\"./User/args\\";
"
`;

exports[`crud should properly generate resolver class for single prisma model: crudIndex 1`] = `
"export { UserCrudResolver } from \\"./User/UserCrudResolver\\";
"
`;

exports[`crud should properly generate resolver class for single prisma model: mainIndex 1`] = `
"import { NonEmptyArray } from \\"type-graphql\\";
import * as crudResolversImport from \\"./resolvers/crud/resolvers-crud.index\\";

export * from \\"./enums\\";
export * from \\"./models\\";
export * from \\"./resolvers/crud\\";
export * from \\"./resolvers/inputs\\";
export * from \\"./resolvers/outputs\\";
export * from \\"./enhance\\";
export * from \\"./scalars\\";

export const crudResolvers = Object.values(crudResolversImport) as unknown as NonEmptyArray<Function>;
export const resolvers = [...crudResolvers] as unknown as NonEmptyArray<Function>;
"
`;

exports[`crud should properly generate resolver class when cannot pluralize model name: StaffCrudResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { AggregateStaffArgs } from \\"./args/AggregateStaffArgs.arg\\";
import { CreateManyStaffArgs } from \\"./args/CreateManyStaffArgs.arg\\";
import { CreateStaffArgs } from \\"./args/CreateStaffArgs.arg\\";
import { DeleteManyStaffArgs } from \\"./args/DeleteManyStaffArgs.arg\\";
import { DeleteStaffArgs } from \\"./args/DeleteStaffArgs.arg\\";
import { FindFirstStaffArgs } from \\"./args/FindFirstStaffArgs.arg\\";
import { FindManyStaffArgs } from \\"./args/FindManyStaffArgs.arg\\";
import { FindUniqueStaffArgs } from \\"./args/FindUniqueStaffArgs.arg\\";
import { GroupByStaffArgs } from \\"./args/GroupByStaffArgs.arg\\";
import { UpdateManyStaffArgs } from \\"./args/UpdateManyStaffArgs.arg\\";
import { UpdateStaffArgs } from \\"./args/UpdateStaffArgs.arg\\";
import { UpsertStaffArgs } from \\"./args/UpsertStaffArgs.arg\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";
import { Staff } from \\"../../../models/Staff.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { AggregateStaff } from \\"../../outputs/AggregateStaff.output\\";
import { StaffGroupBy } from \\"../../outputs/StaffGroupBy.output\\";

@TypeGraphQL.Resolver(_of => Staff)
export class StaffCrudResolver {
  @TypeGraphQL.Query(_returns => Staff, {
    nullable: true
  })
  async findUniqueStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueStaffArgs): Promise<Staff | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => Staff, {
    nullable: true
  })
  async findFirstStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstStaffArgs): Promise<Staff | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => [Staff], {
    nullable: false
  })
  async findManyStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyStaffArgs): Promise<Staff[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Staff, {
    nullable: false
  })
  async createStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateStaffArgs): Promise<Staff> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyStaffArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Staff, {
    nullable: true
  })
  async deleteStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteStaffArgs): Promise<Staff | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Staff, {
    nullable: true
  })
  async updateStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateStaffArgs): Promise<Staff | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyStaffArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyStaffArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Staff, {
    nullable: false
  })
  async upsertStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertStaffArgs): Promise<Staff> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => AggregateStaff, {
    nullable: false
  })
  async aggregateStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateStaffArgs): Promise<AggregateStaff> {
    return getPrismaFromContext(ctx).staff.aggregate({
      ...args,
      ...transformFields(graphqlFields(info as any)),
    });
  }

  @TypeGraphQL.Query(_returns => [StaffGroupBy], {
    nullable: false
  })
  async groupByStaff(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByStaffArgs): Promise<StaffGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).staff.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud should properly generate resolver class when useOriginalMapping is used: FindUniqueUserResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindUniqueUserArgs } from \\"./args/FindUniqueUserArgs.arg\\";
import { User } from \\"../../../models/User.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => User)
export class FindUniqueUserResolver {
  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async findUniqueUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud should properly generate resolver class when useOriginalMapping is used: UserCrudResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { AggregateUserArgs } from \\"./args/AggregateUserArgs.arg\\";
import { CreateManyUserArgs } from \\"./args/CreateManyUserArgs.arg\\";
import { CreateUserArgs } from \\"./args/CreateUserArgs.arg\\";
import { DeleteManyUserArgs } from \\"./args/DeleteManyUserArgs.arg\\";
import { DeleteUserArgs } from \\"./args/DeleteUserArgs.arg\\";
import { FindFirstUserArgs } from \\"./args/FindFirstUserArgs.arg\\";
import { FindManyUserArgs } from \\"./args/FindManyUserArgs.arg\\";
import { FindUniqueUserArgs } from \\"./args/FindUniqueUserArgs.arg\\";
import { GroupByUserArgs } from \\"./args/GroupByUserArgs.arg\\";
import { UpdateManyUserArgs } from \\"./args/UpdateManyUserArgs.arg\\";
import { UpdateUserArgs } from \\"./args/UpdateUserArgs.arg\\";
import { UpsertUserArgs } from \\"./args/UpsertUserArgs.arg\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";
import { User } from \\"../../../models/User.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { AggregateUser } from \\"../../outputs/AggregateUser.output\\";
import { UserGroupBy } from \\"../../outputs/UserGroupBy.output\\";

@TypeGraphQL.Resolver(_of => User)
export class UserCrudResolver {
  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async findUniqueUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => User, {
    nullable: true
  })
  async findFirstUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => [User], {
    nullable: false
  })
  async findManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyUserArgs): Promise<User[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async createUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async deleteUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: true
  })
  async updateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateUserArgs): Promise<User | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyUserArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => User, {
    nullable: false
  })
  async upsertUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertUserArgs): Promise<User> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => AggregateUser, {
    nullable: false
  })
  async aggregateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateUserArgs): Promise<AggregateUser> {
    return getPrismaFromContext(ctx).user.aggregate({
      ...args,
      ...transformFields(graphqlFields(info as any)),
    });
  }

  @TypeGraphQL.Query(_returns => [UserGroupBy], {
    nullable: false
  })
  async groupByUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByUserArgs): Promise<UserGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud when \`orderByAggregateGroup\` preview feature is enabled should properly generate args classes for group by action using aggregate input: GroupBySampleArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { SampleOrderByWithAggregationInput } from \\"../../../inputs/SampleOrderByWithAggregationInput.input\\";
import { SampleScalarWhereWithAggregatesInput } from \\"../../../inputs/SampleScalarWhereWithAggregatesInput.input\\";
import { SampleWhereInput } from \\"../../../inputs/SampleWhereInput.input\\";
import { SampleScalarFieldEnum } from \\"../../../../enums/SampleScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class GroupBySampleArgs {
  @TypeGraphQL.Field(_type => SampleWhereInput, {
    nullable: true
  })
  where?: SampleWhereInput | undefined;

  @TypeGraphQL.Field(_type => [SampleOrderByWithAggregationInput], {
    nullable: true
  })
  orderBy?: SampleOrderByWithAggregationInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleScalarFieldEnum], {
    nullable: false
  })
  by!: Array<\\"idField\\" | \\"stringField\\" | \\"floatField\\" | \\"intField\\" | \\"booleanField\\" | \\"dateField\\" | \\"jsonField\\">;

  @TypeGraphQL.Field(_type => SampleScalarWhereWithAggregatesInput, {
    nullable: true
  })
  having?: SampleScalarWhereWithAggregatesInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by many-to-many relation fields: AggregateFirstModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { FirstModelOrderByWithRelationInput } from \\"../../../inputs/FirstModelOrderByWithRelationInput.input\\";
import { FirstModelWhereInput } from \\"../../../inputs/FirstModelWhereInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../../../inputs/FirstModelWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class AggregateFirstModelArgs {
  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  where?: FirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [FirstModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: FirstModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by many-to-many relation fields: FindFirstFirstModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { FirstModelOrderByWithRelationInput } from \\"../../../inputs/FirstModelOrderByWithRelationInput.input\\";
import { FirstModelWhereInput } from \\"../../../inputs/FirstModelWhereInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../../../inputs/FirstModelWhereUniqueInput.input\\";
import { FirstModelScalarFieldEnum } from \\"../../../../enums/FirstModelScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindFirstFirstModelArgs {
  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  where?: FirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [FirstModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: FirstModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"idField\\" | \\"uniqueStringField\\" | \\"floatField\\"> | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by many-to-many relation fields: FindManyFirstModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { FirstModelOrderByWithRelationInput } from \\"../../../inputs/FirstModelOrderByWithRelationInput.input\\";
import { FirstModelWhereInput } from \\"../../../inputs/FirstModelWhereInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../../../inputs/FirstModelWhereUniqueInput.input\\";
import { FirstModelScalarFieldEnum } from \\"../../../../enums/FirstModelScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindManyFirstModelArgs {
  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  where?: FirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [FirstModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: FirstModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"idField\\" | \\"uniqueStringField\\" | \\"floatField\\"> | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by many-to-many relation fields: index 1`] = `
"export { AggregateFirstModelArgs } from \\"./AggregateFirstModelArgs.arg\\";
export { CreateFirstModelArgs } from \\"./CreateFirstModelArgs.arg\\";
export { CreateManyFirstModelArgs } from \\"./CreateManyFirstModelArgs.arg\\";
export { DeleteFirstModelArgs } from \\"./DeleteFirstModelArgs.arg\\";
export { DeleteManyFirstModelArgs } from \\"./DeleteManyFirstModelArgs.arg\\";
export { FindFirstFirstModelArgs } from \\"./FindFirstFirstModelArgs.arg\\";
export { FindManyFirstModelArgs } from \\"./FindManyFirstModelArgs.arg\\";
export { FindUniqueFirstModelArgs } from \\"./FindUniqueFirstModelArgs.arg\\";
export { GroupByFirstModelArgs } from \\"./GroupByFirstModelArgs.arg\\";
export { UpdateFirstModelArgs } from \\"./UpdateFirstModelArgs.arg\\";
export { UpdateManyFirstModelArgs } from \\"./UpdateManyFirstModelArgs.arg\\";
export { UpsertFirstModelArgs } from \\"./UpsertFirstModelArgs.arg\\";
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by one-to-many relation fields: AggregateSecondModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { SecondModelOrderByWithRelationInput } from \\"../../../inputs/SecondModelOrderByWithRelationInput.input\\";
import { SecondModelWhereInput } from \\"../../../inputs/SecondModelWhereInput.input\\";
import { SecondModelWhereUniqueInput } from \\"../../../inputs/SecondModelWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class AggregateSecondModelArgs {
  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  where?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [SecondModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: SecondModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: SecondModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by one-to-many relation fields: FindFirstSecondModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { SecondModelOrderByWithRelationInput } from \\"../../../inputs/SecondModelOrderByWithRelationInput.input\\";
import { SecondModelWhereInput } from \\"../../../inputs/SecondModelWhereInput.input\\";
import { SecondModelWhereUniqueInput } from \\"../../../inputs/SecondModelWhereUniqueInput.input\\";
import { SecondModelScalarFieldEnum } from \\"../../../../enums/SecondModelScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindFirstSecondModelArgs {
  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  where?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [SecondModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: SecondModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: SecondModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"idField\\" | \\"uniqueStringField\\" | \\"floatField\\" | \\"firstModelFieldId\\"> | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by one-to-many relation fields: FindManySecondModelArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { SecondModelOrderByWithRelationInput } from \\"../../../inputs/SecondModelOrderByWithRelationInput.input\\";
import { SecondModelWhereInput } from \\"../../../inputs/SecondModelWhereInput.input\\";
import { SecondModelWhereUniqueInput } from \\"../../../inputs/SecondModelWhereUniqueInput.input\\";
import { SecondModelScalarFieldEnum } from \\"../../../../enums/SecondModelScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindManySecondModelArgs {
  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  where?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => [SecondModelOrderByWithRelationInput], {
    nullable: true
  })
  orderBy?: SecondModelOrderByWithRelationInput[] | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereUniqueInput, {
    nullable: true
  })
  cursor?: SecondModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"idField\\" | \\"uniqueStringField\\" | \\"floatField\\" | \\"firstModelFieldId\\"> | undefined;
}
"
`;

exports[`crud when \`orderByRelation\` preview feature is enabled should properly generate args classes for sorting by one-to-many relation fields: index 1`] = `
"export { AggregateSecondModelArgs } from \\"./AggregateSecondModelArgs.arg\\";
export { CreateManySecondModelArgs } from \\"./CreateManySecondModelArgs.arg\\";
export { CreateSecondModelArgs } from \\"./CreateSecondModelArgs.arg\\";
export { DeleteManySecondModelArgs } from \\"./DeleteManySecondModelArgs.arg\\";
export { DeleteSecondModelArgs } from \\"./DeleteSecondModelArgs.arg\\";
export { FindFirstSecondModelArgs } from \\"./FindFirstSecondModelArgs.arg\\";
export { FindManySecondModelArgs } from \\"./FindManySecondModelArgs.arg\\";
export { FindUniqueSecondModelArgs } from \\"./FindUniqueSecondModelArgs.arg\\";
export { GroupBySecondModelArgs } from \\"./GroupBySecondModelArgs.arg\\";
export { UpdateManySecondModelArgs } from \\"./UpdateManySecondModelArgs.arg\\";
export { UpdateSecondModelArgs } from \\"./UpdateSecondModelArgs.arg\\";
export { UpsertSecondModelArgs } from \\"./UpsertSecondModelArgs.arg\\";
"
`;

exports[`crud when emitTranspiledCode is set to true should properly generate imports in js files for resolver classes: UserCrudResolver 1`] = `
"\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === \\"object\\" && typeof Reflect.decorate === \\"function\\") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === \\"object\\" && typeof Reflect.metadata === \\"function\\") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { \\"default\\": mod };
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.UserCrudResolver = void 0;
const TypeGraphQL = __importStar(require(\\"type-graphql\\"));
const graphql_fields_1 = __importDefault(require(\\"graphql-fields\\"));
const AggregateUserArgs_arg_1 = require(\\"./args/AggregateUserArgs.arg\\");
const CreateManyUserArgs_arg_1 = require(\\"./args/CreateManyUserArgs.arg\\");
const CreateUserArgs_arg_1 = require(\\"./args/CreateUserArgs.arg\\");
const DeleteManyUserArgs_arg_1 = require(\\"./args/DeleteManyUserArgs.arg\\");
const DeleteUserArgs_arg_1 = require(\\"./args/DeleteUserArgs.arg\\");
const FindFirstUserArgs_arg_1 = require(\\"./args/FindFirstUserArgs.arg\\");
const FindManyUserArgs_arg_1 = require(\\"./args/FindManyUserArgs.arg\\");
const FindUniqueUserArgs_arg_1 = require(\\"./args/FindUniqueUserArgs.arg\\");
const GroupByUserArgs_arg_1 = require(\\"./args/GroupByUserArgs.arg\\");
const UpdateManyUserArgs_arg_1 = require(\\"./args/UpdateManyUserArgs.arg\\");
const UpdateUserArgs_arg_1 = require(\\"./args/UpdateUserArgs.arg\\");
const UpsertUserArgs_arg_1 = require(\\"./args/UpsertUserArgs.arg\\");
const helpers_1 = require(\\"../../../helpers\\");
const User_model_1 = require(\\"../../../models/User.model\\");
const AffectedRowsOutput_output_1 = require(\\"../../outputs/AffectedRowsOutput.output\\");
const AggregateUser_output_1 = require(\\"../../outputs/AggregateUser.output\\");
const UserGroupBy_output_1 = require(\\"../../outputs/UserGroupBy.output\\");
let UserCrudResolver = class UserCrudResolver {
    async user(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.findUnique({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async findFirstUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.findFirst({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async users(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.findMany({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async createUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.create({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async createManyUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.createMany({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async deleteUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.delete({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async updateUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.update({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async deleteManyUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.deleteMany({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async updateManyUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.updateMany({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async upsertUser(ctx, info, args) {
        const { _count } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.upsert({
            ...args,
            ...(_count && helpers_1.transformCountFieldIntoSelectRelationsCount(_count)),
        });
    }
    async aggregateUser(ctx, info, args) {
        return helpers_1.getPrismaFromContext(ctx).user.aggregate({
            ...args,
            ...helpers_1.transformFields(graphql_fields_1.default(info)),
        });
    }
    async groupByUser(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = helpers_1.transformFields(graphql_fields_1.default(info));
        return helpers_1.getPrismaFromContext(ctx).user.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
__decorate([
    TypeGraphQL.Query(_returns => User_model_1.User, {
        nullable: true
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, FindUniqueUserArgs_arg_1.FindUniqueUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"user\\", null);
__decorate([
    TypeGraphQL.Query(_returns => User_model_1.User, {
        nullable: true
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, FindFirstUserArgs_arg_1.FindFirstUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"findFirstUser\\", null);
__decorate([
    TypeGraphQL.Query(_returns => [User_model_1.User], {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, FindManyUserArgs_arg_1.FindManyUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"users\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => User_model_1.User, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, CreateUserArgs_arg_1.CreateUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"createUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_output_1.AffectedRowsOutput, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, CreateManyUserArgs_arg_1.CreateManyUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"createManyUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => User_model_1.User, {
        nullable: true
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, DeleteUserArgs_arg_1.DeleteUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"deleteUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => User_model_1.User, {
        nullable: true
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, UpdateUserArgs_arg_1.UpdateUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"updateUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_output_1.AffectedRowsOutput, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, DeleteManyUserArgs_arg_1.DeleteManyUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"deleteManyUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_output_1.AffectedRowsOutput, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, UpdateManyUserArgs_arg_1.UpdateManyUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"updateManyUser\\", null);
__decorate([
    TypeGraphQL.Mutation(_returns => User_model_1.User, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, UpsertUserArgs_arg_1.UpsertUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"upsertUser\\", null);
__decorate([
    TypeGraphQL.Query(_returns => AggregateUser_output_1.AggregateUser, {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, AggregateUserArgs_arg_1.AggregateUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"aggregateUser\\", null);
__decorate([
    TypeGraphQL.Query(_returns => [UserGroupBy_output_1.UserGroupBy], {
        nullable: false
    }),
    __param(0, TypeGraphQL.Ctx()), __param(1, TypeGraphQL.Info()), __param(2, TypeGraphQL.Args()),
    __metadata(\\"design:type\\", Function),
    __metadata(\\"design:paramtypes\\", [Object, Object, GroupByUserArgs_arg_1.GroupByUserArgs]),
    __metadata(\\"design:returntype\\", Promise)
], UserCrudResolver.prototype, \\"groupByUser\\", null);
UserCrudResolver = __decorate([
    TypeGraphQL.Resolver(_of => User_model_1.User)
], UserCrudResolver);
exports.UserCrudResolver = UserCrudResolver;
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: CreateManyClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { CreateManyClientArgs } from \\"./args/CreateManyClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class CreateManyClientResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: CreateOneClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { CreateClientArgs } from \\"./args/CreateClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class CreateClientResolver {
  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: false
  })
  async createClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateClientArgs): Promise<Client> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: DeleteClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { DeleteClientArgs } from \\"./args/DeleteClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class DeleteClientResolver {
  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: true
  })
  async deleteClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: DeleteManyClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { DeleteManyClientArgs } from \\"./args/DeleteManyClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class DeleteManyClientResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: FindFirstClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindFirstClientArgs } from \\"./args/FindFirstClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class FindFirstClientResolver {
  @TypeGraphQL.Query(_returns => Client, {
    nullable: true
  })
  async findFirstClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: FindManyClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindManyClientArgs } from \\"./args/FindManyClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class FindManyClientResolver {
  @TypeGraphQL.Query(_returns => [Client], {
    nullable: false
  })
  async clients(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyClientArgs): Promise<Client[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: FindUniqueClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { FindUniqueClientArgs } from \\"./args/FindUniqueClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class FindUniqueClientResolver {
  @TypeGraphQL.Query(_returns => Client, {
    nullable: true
  })
  async client(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: GroupByClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { GroupByClientArgs } from \\"./args/GroupByClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { ClientGroupBy } from \\"../../outputs/ClientGroupBy.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class GroupByClientResolver {
  @TypeGraphQL.Query(_returns => [ClientGroupBy], {
    nullable: false
  })
  async groupByClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByClientArgs): Promise<ClientGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: UpdateClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpdateClientArgs } from \\"./args/UpdateClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class UpdateClientResolver {
  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: true
  })
  async updateClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: UpdateManyClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpdateManyClientArgs } from \\"./args/UpdateManyClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class UpdateManyClientResolver {
  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate actions resolver classes for prisma model: UpsertClientResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { UpsertClientArgs } from \\"./args/UpsertClientArgs.arg\\";
import { Client } from \\"../../../models/Client.model\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";

@TypeGraphQL.Resolver(_of => Client)
export class UpsertClientResolver {
  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: false
  })
  async upsertClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertClientArgs): Promise<Client> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: AggregateClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientOrderByInput } from \\"../../../inputs/ClientOrderByInput.input\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class AggregateClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;

  @TypeGraphQL.Field(_type => [ClientOrderByInput], {
    nullable: true
  })
  orderBy?: ClientOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: true
  })
  cursor?: ClientWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: CreateClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientCreateInput } from \\"../../../inputs/ClientCreateInput.input\\";

@TypeGraphQL.ArgsType()
export class CreateClientArgs {
  @TypeGraphQL.Field(_type => ClientCreateInput, {
    nullable: false
  })
  data!: ClientCreateInput;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: CreateManyClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientCreateManyInput } from \\"../../../inputs/ClientCreateManyInput.input\\";

@TypeGraphQL.ArgsType()
export class CreateManyClientArgs {
  @TypeGraphQL.Field(_type => [ClientCreateManyInput], {
    nullable: false
  })
  data!: ClientCreateManyInput[];

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  skipDuplicates?: boolean | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: DeleteClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class DeleteClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: false
  })
  where!: ClientWhereUniqueInput;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: DeleteManyClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";

@TypeGraphQL.ArgsType()
export class DeleteManyClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: FindFirstClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientOrderByInput } from \\"../../../inputs/ClientOrderByInput.input\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";
import { ClientScalarFieldEnum } from \\"../../../../enums/ClientScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindFirstClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;

  @TypeGraphQL.Field(_type => [ClientOrderByInput], {
    nullable: true
  })
  orderBy?: ClientOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: true
  })
  cursor?: ClientWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [ClientScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\"> | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: FindManyClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientOrderByInput } from \\"../../../inputs/ClientOrderByInput.input\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";
import { ClientScalarFieldEnum } from \\"../../../../enums/ClientScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class FindManyClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;

  @TypeGraphQL.Field(_type => [ClientOrderByInput], {
    nullable: true
  })
  orderBy?: ClientOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: true
  })
  cursor?: ClientWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;

  @TypeGraphQL.Field(_type => [ClientScalarFieldEnum], {
    nullable: true
  })
  distinct?: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\"> | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: FindUniqueClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class FindUniqueClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: false
  })
  where!: ClientWhereUniqueInput;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: GroupByClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientOrderByInput } from \\"../../../inputs/ClientOrderByInput.input\\";
import { ClientScalarWhereWithAggregatesInput } from \\"../../../inputs/ClientScalarWhereWithAggregatesInput.input\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";
import { ClientScalarFieldEnum } from \\"../../../../enums/ClientScalarFieldEnum.enum\\";

@TypeGraphQL.ArgsType()
export class GroupByClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;

  @TypeGraphQL.Field(_type => [ClientOrderByInput], {
    nullable: true
  })
  orderBy?: ClientOrderByInput[] | undefined;

  @TypeGraphQL.Field(_type => [ClientScalarFieldEnum], {
    nullable: false
  })
  by!: Array<\\"intIdField\\" | \\"uniqueStringField\\" | \\"optionalStringField\\" | \\"dateField\\">;

  @TypeGraphQL.Field(_type => ClientScalarWhereWithAggregatesInput, {
    nullable: true
  })
  having?: ClientScalarWhereWithAggregatesInput | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  take?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  skip?: number | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: Index 1`] = `
"export { AggregateClientArgs } from \\"./AggregateClientArgs.arg\\";
export { CreateClientArgs } from \\"./CreateClientArgs.arg\\";
export { CreateManyClientArgs } from \\"./CreateManyClientArgs.arg\\";
export { DeleteClientArgs } from \\"./DeleteClientArgs.arg\\";
export { DeleteManyClientArgs } from \\"./DeleteManyClientArgs.arg\\";
export { FindFirstClientArgs } from \\"./FindFirstClientArgs.arg\\";
export { FindManyClientArgs } from \\"./FindManyClientArgs.arg\\";
export { FindUniqueClientArgs } from \\"./FindUniqueClientArgs.arg\\";
export { GroupByClientArgs } from \\"./GroupByClientArgs.arg\\";
export { UpdateClientArgs } from \\"./UpdateClientArgs.arg\\";
export { UpdateManyClientArgs } from \\"./UpdateManyClientArgs.arg\\";
export { UpsertClientArgs } from \\"./UpsertClientArgs.arg\\";
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: UpdateClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientUpdateInput } from \\"../../../inputs/ClientUpdateInput.input\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateClientArgs {
  @TypeGraphQL.Field(_type => ClientUpdateInput, {
    nullable: false
  })
  data!: ClientUpdateInput;

  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: false
  })
  where!: ClientWhereUniqueInput;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: UpdateManyClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientUpdateManyMutationInput } from \\"../../../inputs/ClientUpdateManyMutationInput.input\\";
import { ClientWhereInput } from \\"../../../inputs/ClientWhereInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateManyClientArgs {
  @TypeGraphQL.Field(_type => ClientUpdateManyMutationInput, {
    nullable: false
  })
  data!: ClientUpdateManyMutationInput;

  @TypeGraphQL.Field(_type => ClientWhereInput, {
    nullable: true
  })
  where?: ClientWhereInput | undefined;
}
"
`;

exports[`crud when model is renamed should properly generate args classes for every method of crud resolver: UpsertClientArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { ClientCreateInput } from \\"../../../inputs/ClientCreateInput.input\\";
import { ClientUpdateInput } from \\"../../../inputs/ClientUpdateInput.input\\";
import { ClientWhereUniqueInput } from \\"../../../inputs/ClientWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpsertClientArgs {
  @TypeGraphQL.Field(_type => ClientWhereUniqueInput, {
    nullable: false
  })
  where!: ClientWhereUniqueInput;

  @TypeGraphQL.Field(_type => ClientCreateInput, {
    nullable: false
  })
  create!: ClientCreateInput;

  @TypeGraphQL.Field(_type => ClientUpdateInput, {
    nullable: false
  })
  update!: ClientUpdateInput;
}
"
`;

exports[`crud when model is renamed should properly generate resolver class for single prisma model: ClientCrudResolver 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import graphqlFields from \\"graphql-fields\\";
import { GraphQLResolveInfo } from \\"graphql\\";
import { AggregateClientArgs } from \\"./args/AggregateClientArgs.arg\\";
import { CreateClientArgs } from \\"./args/CreateClientArgs.arg\\";
import { CreateManyClientArgs } from \\"./args/CreateManyClientArgs.arg\\";
import { DeleteClientArgs } from \\"./args/DeleteClientArgs.arg\\";
import { DeleteManyClientArgs } from \\"./args/DeleteManyClientArgs.arg\\";
import { FindFirstClientArgs } from \\"./args/FindFirstClientArgs.arg\\";
import { FindManyClientArgs } from \\"./args/FindManyClientArgs.arg\\";
import { FindUniqueClientArgs } from \\"./args/FindUniqueClientArgs.arg\\";
import { GroupByClientArgs } from \\"./args/GroupByClientArgs.arg\\";
import { UpdateClientArgs } from \\"./args/UpdateClientArgs.arg\\";
import { UpdateManyClientArgs } from \\"./args/UpdateManyClientArgs.arg\\";
import { UpsertClientArgs } from \\"./args/UpsertClientArgs.arg\\";
import { transformFields, getPrismaFromContext, transformCountFieldIntoSelectRelationsCount } from \\"../../../helpers\\";
import { Client } from \\"../../../models/Client.model\\";
import { AffectedRowsOutput } from \\"../../outputs/AffectedRowsOutput.output\\";
import { AggregateClient } from \\"../../outputs/AggregateClient.output\\";
import { ClientGroupBy } from \\"../../outputs/ClientGroupBy.output\\";

@TypeGraphQL.Resolver(_of => Client)
export class ClientCrudResolver {
  @TypeGraphQL.Query(_returns => Client, {
    nullable: true
  })
  async findUniqueClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findUnique({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => Client, {
    nullable: true
  })
  async findFirstClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findFirst({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => [Client], {
    nullable: false
  })
  async findManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyClientArgs): Promise<Client[]> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.findMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: false
  })
  async createClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateClientArgs): Promise<Client> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.create({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async createManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.createMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: true
  })
  async deleteClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.delete({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: true
  })
  async updateClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateClientArgs): Promise<Client | null> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.update({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async deleteManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.deleteMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
    nullable: false
  })
  async updateManyClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyClientArgs): Promise<AffectedRowsOutput> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.updateMany({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Mutation(_returns => Client, {
    nullable: false
  })
  async upsertClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertClientArgs): Promise<Client> {
    const { _count } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.upsert({
      ...args,
      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),
    });
  }

  @TypeGraphQL.Query(_returns => AggregateClient, {
    nullable: false
  })
  async aggregateClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateClientArgs): Promise<AggregateClient> {
    return getPrismaFromContext(ctx).user.aggregate({
      ...args,
      ...transformFields(graphqlFields(info as any)),
    });
  }

  @TypeGraphQL.Query(_returns => [ClientGroupBy], {
    nullable: false
  })
  async groupByClient(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByClientArgs): Promise<ClientGroupBy[]> {
    const { _count, _avg, _sum, _min, _max } = transformFields(
      graphqlFields(info as any)
    );
    return getPrismaFromContext(ctx).user.groupBy({
      ...args,
      ...Object.fromEntries(
        Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
      ),
    });
  }
}
"
`;

exports[`crud when useUncheckedScalarInputs mode is enabled should properly generate create and update args classes: CreateUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUncheckedCreateInput } from \\"../../../inputs/UserUncheckedCreateInput.input\\";

@TypeGraphQL.ArgsType()
export class CreateUserArgs {
  @TypeGraphQL.Field(_type => UserUncheckedCreateInput, {
    nullable: false
  })
  data!: UserUncheckedCreateInput;
}
"
`;

exports[`crud when useUncheckedScalarInputs mode is enabled should properly generate create and update args classes: UpdateManyUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUncheckedUpdateManyInput } from \\"../../../inputs/UserUncheckedUpdateManyInput.input\\";
import { UserWhereInput } from \\"../../../inputs/UserWhereInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateManyUserArgs {
  @TypeGraphQL.Field(_type => UserUncheckedUpdateManyInput, {
    nullable: false
  })
  data!: UserUncheckedUpdateManyInput;

  @TypeGraphQL.Field(_type => UserWhereInput, {
    nullable: true
  })
  where?: UserWhereInput | undefined;
}
"
`;

exports[`crud when useUncheckedScalarInputs mode is enabled should properly generate create and update args classes: UpdateUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUncheckedUpdateInput } from \\"../../../inputs/UserUncheckedUpdateInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpdateUserArgs {
  @TypeGraphQL.Field(_type => UserUncheckedUpdateInput, {
    nullable: false
  })
  data!: UserUncheckedUpdateInput;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;
}
"
`;

exports[`crud when useUncheckedScalarInputs mode is enabled should properly generate create and update args classes: UpsertUserArgs 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { UserUncheckedCreateInput } from \\"../../../inputs/UserUncheckedCreateInput.input\\";
import { UserUncheckedUpdateInput } from \\"../../../inputs/UserUncheckedUpdateInput.input\\";
import { UserWhereUniqueInput } from \\"../../../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.ArgsType()
export class UpsertUserArgs {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;

  @TypeGraphQL.Field(_type => UserUncheckedCreateInput, {
    nullable: false
  })
  create!: UserUncheckedCreateInput;

  @TypeGraphQL.Field(_type => UserUncheckedUpdateInput, {
    nullable: false
  })
  update!: UserUncheckedUpdateInput;
}
"
`;

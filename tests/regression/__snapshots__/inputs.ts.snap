// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inputs should generate proper ScalarWhereWithAggregatesInput for model: SampleScalarWhereWithAggregatesInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BoolWithAggregatesFilter } from \\"../inputs/BoolWithAggregatesFilter.input\\";
import { DateTimeWithAggregatesFilter } from \\"../inputs/DateTimeWithAggregatesFilter.input\\";
import { FloatWithAggregatesFilter } from \\"../inputs/FloatWithAggregatesFilter.input\\";
import { IntWithAggregatesFilter } from \\"../inputs/IntWithAggregatesFilter.input\\";
import { JsonWithAggregatesFilter } from \\"../inputs/JsonWithAggregatesFilter.input\\";
import { StringWithAggregatesFilter } from \\"../inputs/StringWithAggregatesFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleScalarWhereWithAggregatesInput {
  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  AND?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  OR?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  NOT?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => IntWithAggregatesFilter, {
    nullable: true
  })
  idField?: IntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => StringWithAggregatesFilter, {
    nullable: true
  })
  stringField?: StringWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => FloatWithAggregatesFilter, {
    nullable: true
  })
  floatField?: FloatWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => IntWithAggregatesFilter, {
    nullable: true
  })
  intField?: IntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => BoolWithAggregatesFilter, {
    nullable: true
  })
  booleanField?: BoolWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeWithAggregatesFilter, {
    nullable: true
  })
  dateField?: DateTimeWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => JsonWithAggregatesFilter, {
    nullable: true
  })
  jsonField?: JsonWithAggregatesFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: BoolWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBoolFilter } from \\"../inputs/NestedBoolFilter.input\\";
import { NestedBoolWithAggregatesFilter } from \\"../inputs/NestedBoolWithAggregatesFilter.input\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolWithAggregatesFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedBoolWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  _min?: NestedBoolFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  _max?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: DateTimeWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedDateTimeFilter } from \\"../inputs/NestedDateTimeFilter.input\\";
import { NestedDateTimeWithAggregatesFilter } from \\"../inputs/NestedDateTimeWithAggregatesFilter.input\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeWithAggregatesFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedDateTimeWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  _min?: NestedDateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  _max?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: FloatWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter.input\\";
import { NestedFloatWithAggregatesFilter } from \\"../inputs/NestedFloatWithAggregatesFilter.input\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatWithAggregatesFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedFloatWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  _avg?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  _sum?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  _min?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  _max?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: IntWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter.input\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";
import { NestedIntWithAggregatesFilter } from \\"../inputs/NestedIntWithAggregatesFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntWithAggregatesFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedIntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  _avg?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _sum?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _min?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _max?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: JsonWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";
import { NestedJsonFilter } from \\"../inputs/NestedJsonFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class JsonWithAggregatesFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  equals?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  not?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedJsonFilter, {
    nullable: true
  })
  _min?: NestedJsonFilter | undefined;

  @TypeGraphQL.Field(_type => NestedJsonFilter, {
    nullable: true
  })
  _max?: NestedJsonFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: StringWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";
import { NestedStringFilter } from \\"../inputs/NestedStringFilter.input\\";
import { NestedStringWithAggregatesFilter } from \\"../inputs/NestedStringWithAggregatesFilter.input\\";
import { QueryMode } from \\"../../enums/QueryMode.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringWithAggregatesFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedStringWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  _count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  _min?: NestedStringFilter | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  _max?: NestedStringFilter | undefined;
}
"
`;

exports[`inputs should generate proper WithAggregatesFilter for scalars: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SampleCreateInput } from \\"./SampleCreateInput.input\\";
export { SampleCreateManyInput } from \\"./SampleCreateManyInput.input\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput.input\\";
export { SampleScalarWhereWithAggregatesInput } from \\"./SampleScalarWhereWithAggregatesInput.input\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput.input\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput.input\\";
export { SampleWhereInput } from \\"./SampleWhereInput.input\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type class for filtering by enums values: EnumColorFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedEnumColorFilter } from \\"../inputs/NestedEnumColorFilter.input\\";
import { Color } from \\"../../enums/Color.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class EnumColorFilter {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  equals?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  in?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  notIn?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => NestedEnumColorFilter, {
    nullable: true
  })
  not?: NestedEnumColorFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type class for filtering by enums values: NestedEnumColorFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { Color } from \\"../../enums/Color.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedEnumColorFilter {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  equals?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  in?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  notIn?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => NestedEnumColorFilter, {
    nullable: true
  })
  not?: NestedEnumColorFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type class for filtering by enums values: index 1`] = `
"export { EnumColorFieldUpdateOperationsInput } from \\"./EnumColorFieldUpdateOperationsInput.input\\";
export { EnumColorFilter } from \\"./EnumColorFilter.input\\";
export { EnumColorWithAggregatesFilter } from \\"./EnumColorWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedEnumColorFilter } from \\"./NestedEnumColorFilter.input\\";
export { NestedEnumColorWithAggregatesFilter } from \\"./NestedEnumColorWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput.input\\";
export { SampleModelCreateManyInput } from \\"./SampleModelCreateManyInput.input\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput.input\\";
export { SampleModelScalarWhereWithAggregatesInput } from \\"./SampleModelScalarWhereWithAggregatesInput.input\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput.input\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput.input\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput.input\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput.input\\";
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserCreateNestedOneWithoutPostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { UserCreateOrConnectWithoutPostsFieldInput } from \\"../inputs/UserCreateOrConnectWithoutPostsFieldInput.input\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput.input\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserCreateNestedOneWithoutPostsFieldInput {
  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: true
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserCreateOrConnectWithoutPostsFieldInput, {
    nullable: true
  })
  connectOrCreate?: UserCreateOrConnectWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  connect?: UserWhereUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserCreateOrConnectWithoutPostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput.input\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserCreateOrConnectWithoutPostsFieldInput {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;

  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: false
  })
  create!: UserCreateWithoutPostsFieldInput;
}
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserUpdateOneRequiredWithoutPostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { UserCreateOrConnectWithoutPostsFieldInput } from \\"../inputs/UserCreateOrConnectWithoutPostsFieldInput.input\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput.input\\";
import { UserUpdateWithoutPostsFieldInput } from \\"../inputs/UserUpdateWithoutPostsFieldInput.input\\";
import { UserUpsertWithoutPostsFieldInput } from \\"../inputs/UserUpsertWithoutPostsFieldInput.input\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserUpdateOneRequiredWithoutPostsFieldInput {
  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: true
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserCreateOrConnectWithoutPostsFieldInput, {
    nullable: true
  })
  connectOrCreate?: UserCreateOrConnectWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserUpsertWithoutPostsFieldInput, {
    nullable: true
  })
  upsert?: UserUpsertWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  connect?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => UserUpdateWithoutPostsFieldInput, {
    nullable: true
  })
  update?: UserUpdateWithoutPostsFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SampleModelCreateintArrayFieldInput } from \\"../inputs/SampleModelCreateintArrayFieldInput.input\\";
import { SampleModelCreatestringArrayFieldInput } from \\"../inputs/SampleModelCreatestringArrayFieldInput.input\\";
import { Color } from \\"../../enums/Color.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreateInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  optionalStringField?: string | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  optionalIntField?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  optionalFloatField?: number | undefined;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: false
  })
  booleanField!: boolean;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  optionalBooleanField?: boolean | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateField!: Date;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  optionalDateField?: Date | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: false
  })
  jsonField!: Prisma.InputJsonValue;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => Color, {
    nullable: false
  })
  enumField!: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\";

  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  optionalEnumField?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => SampleModelCreateintArrayFieldInput, {
    nullable: true
  })
  intArrayField?: SampleModelCreateintArrayFieldInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelCreatestringArrayFieldInput, {
    nullable: true
  })
  stringArrayField?: SampleModelCreatestringArrayFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreateManyInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SampleModelCreateManyintArrayFieldInput } from \\"../inputs/SampleModelCreateManyintArrayFieldInput.input\\";
import { SampleModelCreateManystringArrayFieldInput } from \\"../inputs/SampleModelCreateManystringArrayFieldInput.input\\";
import { Color } from \\"../../enums/Color.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreateManyInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  intIdField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  optionalStringField?: string | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  optionalIntField?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  optionalFloatField?: number | undefined;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: false
  })
  booleanField!: boolean;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  optionalBooleanField?: boolean | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateField!: Date;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  optionalDateField?: Date | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: false
  })
  jsonField!: Prisma.InputJsonValue;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => Color, {
    nullable: false
  })
  enumField!: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\";

  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  optionalEnumField?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => SampleModelCreateManyintArrayFieldInput, {
    nullable: true
  })
  intArrayField?: SampleModelCreateManyintArrayFieldInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelCreateManystringArrayFieldInput, {
    nullable: true
  })
  stringArrayField?: SampleModelCreateManystringArrayFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreateManyintArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreateManyintArrayFieldInput {
  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: false
  })
  set!: number[];
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreateManystringArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreateManystringArrayFieldInput {
  @TypeGraphQL.Field(_type => [String], {
    nullable: false
  })
  set!: string[];
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreateintArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreateintArrayFieldInput {
  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: false
  })
  set!: number[];
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: SampleModelCreatestringArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelCreatestringArrayFieldInput {
  @TypeGraphQL.Field(_type => [String], {
    nullable: false
  })
  set!: string[];
}
"
`;

exports[`inputs should properly generate input type classes for creating models and scalar fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolNullableFilter } from \\"./BoolNullableFilter.input\\";
export { BoolNullableWithAggregatesFilter } from \\"./BoolNullableWithAggregatesFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeNullableFilter } from \\"./DateTimeNullableFilter.input\\";
export { DateTimeNullableWithAggregatesFilter } from \\"./DateTimeNullableWithAggregatesFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { EnumColorFieldUpdateOperationsInput } from \\"./EnumColorFieldUpdateOperationsInput.input\\";
export { EnumColorFilter } from \\"./EnumColorFilter.input\\";
export { EnumColorNullableFilter } from \\"./EnumColorNullableFilter.input\\";
export { EnumColorNullableWithAggregatesFilter } from \\"./EnumColorNullableWithAggregatesFilter.input\\";
export { EnumColorWithAggregatesFilter } from \\"./EnumColorWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatNullableFilter } from \\"./FloatNullableFilter.input\\";
export { FloatNullableWithAggregatesFilter } from \\"./FloatNullableWithAggregatesFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntNullableFilter } from \\"./IntNullableFilter.input\\";
export { IntNullableListFilter } from \\"./IntNullableListFilter.input\\";
export { IntNullableWithAggregatesFilter } from \\"./IntNullableWithAggregatesFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonNullableFilter } from \\"./JsonNullableFilter.input\\";
export { JsonNullableWithAggregatesFilter } from \\"./JsonNullableWithAggregatesFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolNullableFilter } from \\"./NestedBoolNullableFilter.input\\";
export { NestedBoolNullableWithAggregatesFilter } from \\"./NestedBoolNullableWithAggregatesFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeNullableFilter } from \\"./NestedDateTimeNullableFilter.input\\";
export { NestedDateTimeNullableWithAggregatesFilter } from \\"./NestedDateTimeNullableWithAggregatesFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedEnumColorFilter } from \\"./NestedEnumColorFilter.input\\";
export { NestedEnumColorNullableFilter } from \\"./NestedEnumColorNullableFilter.input\\";
export { NestedEnumColorNullableWithAggregatesFilter } from \\"./NestedEnumColorNullableWithAggregatesFilter.input\\";
export { NestedEnumColorWithAggregatesFilter } from \\"./NestedEnumColorWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter.input\\";
export { NestedFloatNullableWithAggregatesFilter } from \\"./NestedFloatNullableWithAggregatesFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntNullableWithAggregatesFilter } from \\"./NestedIntNullableWithAggregatesFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedJsonNullableFilter } from \\"./NestedJsonNullableFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter.input\\";
export { NestedStringNullableWithAggregatesFilter } from \\"./NestedStringNullableWithAggregatesFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { NullableBoolFieldUpdateOperationsInput } from \\"./NullableBoolFieldUpdateOperationsInput.input\\";
export { NullableDateTimeFieldUpdateOperationsInput } from \\"./NullableDateTimeFieldUpdateOperationsInput.input\\";
export { NullableEnumColorFieldUpdateOperationsInput } from \\"./NullableEnumColorFieldUpdateOperationsInput.input\\";
export { NullableFloatFieldUpdateOperationsInput } from \\"./NullableFloatFieldUpdateOperationsInput.input\\";
export { NullableIntFieldUpdateOperationsInput } from \\"./NullableIntFieldUpdateOperationsInput.input\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput.input\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput.input\\";
export { SampleModelCreateManyInput } from \\"./SampleModelCreateManyInput.input\\";
export { SampleModelCreateManyintArrayFieldInput } from \\"./SampleModelCreateManyintArrayFieldInput.input\\";
export { SampleModelCreateManystringArrayFieldInput } from \\"./SampleModelCreateManystringArrayFieldInput.input\\";
export { SampleModelCreateintArrayFieldInput } from \\"./SampleModelCreateintArrayFieldInput.input\\";
export { SampleModelCreatestringArrayFieldInput } from \\"./SampleModelCreatestringArrayFieldInput.input\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput.input\\";
export { SampleModelScalarWhereWithAggregatesInput } from \\"./SampleModelScalarWhereWithAggregatesInput.input\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput.input\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput.input\\";
export { SampleModelUpdateintArrayFieldInput } from \\"./SampleModelUpdateintArrayFieldInput.input\\";
export { SampleModelUpdatestringArrayFieldInput } from \\"./SampleModelUpdatestringArrayFieldInput.input\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput.input\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringNullableFilter } from \\"./StringNullableFilter.input\\";
export { StringNullableListFilter } from \\"./StringNullableListFilter.input\\";
export { StringNullableWithAggregatesFilter } from \\"./StringNullableWithAggregatesFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BoolFilter } from \\"../inputs/BoolFilter.input\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter.input\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { JsonFilter } from \\"../inputs/JsonFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";
import { StringNullableFilter } from \\"../inputs/StringNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelWhereInput {
  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  AND?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  OR?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  NOT?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intIdField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  stringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringNullableFilter, {
    nullable: true
  })
  optionalStringField?: StringNullableFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => BoolFilter, {
    nullable: true
  })
  booleanField?: BoolFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeFilter, {
    nullable: true
  })
  dateField?: DateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => JsonFilter, {
    nullable: true
  })
  jsonField?: JsonFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  intIdField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter.input\\";
export { NestedStringNullableWithAggregatesFilter } from \\"./NestedStringNullableWithAggregatesFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput.input\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput.input\\";
export { SampleModelCreateManyInput } from \\"./SampleModelCreateManyInput.input\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput.input\\";
export { SampleModelScalarWhereWithAggregatesInput } from \\"./SampleModelScalarWhereWithAggregatesInput.input\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput.input\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput.input\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput.input\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringNullableFilter } from \\"./StringNullableFilter.input\\";
export { StringNullableWithAggregatesFilter } from \\"./StringNullableWithAggregatesFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  AND?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  OR?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  NOT?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { SecondModelListRelationFilter } from \\"../inputs/SecondModelListRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  AND?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  OR?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  NOT?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => SecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: SecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedManyWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedManyWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelListRelationFilter } from \\"./FirstModelListRelationFilter.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelScalarWhereInput } from \\"./FirstModelScalarWhereInput.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateManyWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelsFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelsFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelsFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelsFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelsFieldInput } from \\"./SecondModelCreateWithoutFirstModelsFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelWhereInput } from \\"../inputs/FirstModelWhereInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelRelationFilter {
  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  is?: FirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  isNot?: FirstModelWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { SecondModelListRelationFilter } from \\"../inputs/SecondModelListRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  AND?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  OR?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  NOT?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => SecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: SecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelListRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SecondModelWhereInput } from \\"../inputs/SecondModelWhereInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelListRelationFilter {
  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  every?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  some?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  none?: SecondModelWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstModelFieldId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  AND?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  OR?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  NOT?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelRelationFilter } from \\"../inputs/FirstModelRelationFilter.input\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelWhereInput {
  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  AND?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  OR?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  NOT?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => FirstModelRelationFilter, {
    nullable: true
  })
  firstModelField?: FirstModelRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedOneWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyFirstModelFieldInput } from \\"./SecondModelCreateManyFirstModelFieldInput.input\\";
export { SecondModelCreateManyFirstModelFieldInputEnvelope } from \\"./SecondModelCreateManyFirstModelFieldInputEnvelope.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: BoolFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBoolFilter } from \\"../inputs/NestedBoolFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  not?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: DateTimeFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedDateTimeFilter } from \\"../inputs/NestedDateTimeFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  not?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: FloatFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  not?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: IntFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  not?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: IntNullableListFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntNullableListFilter {
  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  equals?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  has?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  hasEvery?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  hasSome?: number[] | undefined;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  isEmpty?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: JsonFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class JsonFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  equals?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  not?: Prisma.InputJsonValue | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedBoolFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedBoolFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  not?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedDateTimeFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedDateTimeFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  not?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedFloatFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedFloatFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  not?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedIntFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedIntFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  not?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedStringNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedStringNullableFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => NestedStringNullableFilter, {
    nullable: true
  })
  not?: NestedStringNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedStringFilter } from \\"../inputs/NestedStringFilter.input\\";
import { QueryMode } from \\"../../enums/QueryMode.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  not?: NestedStringFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedStringNullableFilter } from \\"../inputs/NestedStringNullableFilter.input\\";
import { QueryMode } from \\"../../enums/QueryMode.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringNullableFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringNullableFilter, {
    nullable: true
  })
  not?: NestedStringNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringNullableListFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringNullableListFilter {
  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  equals?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  has?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  hasEvery?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  hasSome?: string[] | undefined;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  isEmpty?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolNullableFilter } from \\"./BoolNullableFilter.input\\";
export { BoolNullableWithAggregatesFilter } from \\"./BoolNullableWithAggregatesFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeNullableFilter } from \\"./DateTimeNullableFilter.input\\";
export { DateTimeNullableWithAggregatesFilter } from \\"./DateTimeNullableWithAggregatesFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatNullableFilter } from \\"./FloatNullableFilter.input\\";
export { FloatNullableWithAggregatesFilter } from \\"./FloatNullableWithAggregatesFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntNullableFilter } from \\"./IntNullableFilter.input\\";
export { IntNullableListFilter } from \\"./IntNullableListFilter.input\\";
export { IntNullableWithAggregatesFilter } from \\"./IntNullableWithAggregatesFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonNullableFilter } from \\"./JsonNullableFilter.input\\";
export { JsonNullableWithAggregatesFilter } from \\"./JsonNullableWithAggregatesFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolNullableFilter } from \\"./NestedBoolNullableFilter.input\\";
export { NestedBoolNullableWithAggregatesFilter } from \\"./NestedBoolNullableWithAggregatesFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeNullableFilter } from \\"./NestedDateTimeNullableFilter.input\\";
export { NestedDateTimeNullableWithAggregatesFilter } from \\"./NestedDateTimeNullableWithAggregatesFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter.input\\";
export { NestedFloatNullableWithAggregatesFilter } from \\"./NestedFloatNullableWithAggregatesFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntNullableWithAggregatesFilter } from \\"./NestedIntNullableWithAggregatesFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedJsonNullableFilter } from \\"./NestedJsonNullableFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter.input\\";
export { NestedStringNullableWithAggregatesFilter } from \\"./NestedStringNullableWithAggregatesFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { NullableBoolFieldUpdateOperationsInput } from \\"./NullableBoolFieldUpdateOperationsInput.input\\";
export { NullableDateTimeFieldUpdateOperationsInput } from \\"./NullableDateTimeFieldUpdateOperationsInput.input\\";
export { NullableFloatFieldUpdateOperationsInput } from \\"./NullableFloatFieldUpdateOperationsInput.input\\";
export { NullableIntFieldUpdateOperationsInput } from \\"./NullableIntFieldUpdateOperationsInput.input\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput.input\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput.input\\";
export { SampleModelCreateManyInput } from \\"./SampleModelCreateManyInput.input\\";
export { SampleModelCreateManyintArrayFieldInput } from \\"./SampleModelCreateManyintArrayFieldInput.input\\";
export { SampleModelCreateManystringArrayFieldInput } from \\"./SampleModelCreateManystringArrayFieldInput.input\\";
export { SampleModelCreateintArrayFieldInput } from \\"./SampleModelCreateintArrayFieldInput.input\\";
export { SampleModelCreatestringArrayFieldInput } from \\"./SampleModelCreatestringArrayFieldInput.input\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput.input\\";
export { SampleModelScalarWhereWithAggregatesInput } from \\"./SampleModelScalarWhereWithAggregatesInput.input\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput.input\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput.input\\";
export { SampleModelUpdateintArrayFieldInput } from \\"./SampleModelUpdateintArrayFieldInput.input\\";
export { SampleModelUpdatestringArrayFieldInput } from \\"./SampleModelUpdatestringArrayFieldInput.input\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput.input\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringNullableFilter } from \\"./StringNullableFilter.input\\";
export { StringNullableListFilter } from \\"./StringNullableListFilter.input\\";
export { StringNullableWithAggregatesFilter } from \\"./StringNullableWithAggregatesFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for inserting many entities: FirstModelCreateManyInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateManyInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs should properly generate input type classes for inserting many entities: SecondModelCreateManyFirstModelFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelCreateManyFirstModelFieldInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs should properly generate input type classes for inserting many entities: SecondModelCreateManyFirstModelFieldInputEnvelope 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SecondModelCreateManyFirstModelFieldInput } from \\"../inputs/SecondModelCreateManyFirstModelFieldInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelCreateManyFirstModelFieldInputEnvelope {
  @TypeGraphQL.Field(_type => [SecondModelCreateManyFirstModelFieldInput], {
    nullable: false
  })
  data!: SecondModelCreateManyFirstModelFieldInput[];

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  skipDuplicates?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for inserting many entities: SecondModelCreateManyInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelCreateManyInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  firstModelFieldId!: number;
}
"
`;

exports[`inputs should properly generate input type classes for inserting many entities: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedOneWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyFirstModelFieldInput } from \\"./SecondModelCreateManyFirstModelFieldInput.input\\";
export { SecondModelCreateManyFirstModelFieldInputEnvelope } from \\"./SecondModelCreateManyFirstModelFieldInputEnvelope.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorFirstNameLastNameCompoundUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorFirstNameLastNameCompoundUniqueInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  firstName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  lastName!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  lastName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  age?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { MovieListRelationFilter } from \\"../inputs/MovieListRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorWhereInput {
  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  AND?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  OR?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  NOT?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  firstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  lastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  age?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => MovieListRelationFilter, {
    nullable: true
  })
  movies?: MovieListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { DirectorFirstNameLastNameCompoundUniqueInput } from \\"../inputs/DirectorFirstNameLastNameCompoundUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorWhereUniqueInput {
  @TypeGraphQL.Field(_type => DirectorFirstNameLastNameCompoundUniqueInput, {
    nullable: true
  })
  firstName_lastName?: DirectorFirstNameLastNameCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: index 1`] = `
"export { DirectorCreateInput } from \\"./DirectorCreateInput.input\\";
export { DirectorCreateManyInput } from \\"./DirectorCreateManyInput.input\\";
export { DirectorCreateNestedOneWithoutMoviesInput } from \\"./DirectorCreateNestedOneWithoutMoviesInput.input\\";
export { DirectorCreateOrConnectWithoutMoviesInput } from \\"./DirectorCreateOrConnectWithoutMoviesInput.input\\";
export { DirectorCreateWithoutMoviesInput } from \\"./DirectorCreateWithoutMoviesInput.input\\";
export { DirectorFirstNameLastNameCompoundUniqueInput } from \\"./DirectorFirstNameLastNameCompoundUniqueInput.input\\";
export { DirectorOrderByInput } from \\"./DirectorOrderByInput.input\\";
export { DirectorRelationFilter } from \\"./DirectorRelationFilter.input\\";
export { DirectorScalarWhereWithAggregatesInput } from \\"./DirectorScalarWhereWithAggregatesInput.input\\";
export { DirectorUpdateInput } from \\"./DirectorUpdateInput.input\\";
export { DirectorUpdateManyMutationInput } from \\"./DirectorUpdateManyMutationInput.input\\";
export { DirectorUpdateOneRequiredWithoutMoviesInput } from \\"./DirectorUpdateOneRequiredWithoutMoviesInput.input\\";
export { DirectorUpdateWithoutMoviesInput } from \\"./DirectorUpdateWithoutMoviesInput.input\\";
export { DirectorUpsertWithoutMoviesInput } from \\"./DirectorUpsertWithoutMoviesInput.input\\";
export { DirectorWhereInput } from \\"./DirectorWhereInput.input\\";
export { DirectorWhereUniqueInput } from \\"./DirectorWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { MovieCreateInput } from \\"./MovieCreateInput.input\\";
export { MovieCreateManyDirectorInput } from \\"./MovieCreateManyDirectorInput.input\\";
export { MovieCreateManyDirectorInputEnvelope } from \\"./MovieCreateManyDirectorInputEnvelope.input\\";
export { MovieCreateManyInput } from \\"./MovieCreateManyInput.input\\";
export { MovieCreateNestedManyWithoutDirectorInput } from \\"./MovieCreateNestedManyWithoutDirectorInput.input\\";
export { MovieCreateOrConnectWithoutDirectorInput } from \\"./MovieCreateOrConnectWithoutDirectorInput.input\\";
export { MovieCreateWithoutDirectorInput } from \\"./MovieCreateWithoutDirectorInput.input\\";
export { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"./MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput.input\\";
export { MovieListRelationFilter } from \\"./MovieListRelationFilter.input\\";
export { MovieOrderByInput } from \\"./MovieOrderByInput.input\\";
export { MovieScalarWhereInput } from \\"./MovieScalarWhereInput.input\\";
export { MovieScalarWhereWithAggregatesInput } from \\"./MovieScalarWhereWithAggregatesInput.input\\";
export { MovieUpdateInput } from \\"./MovieUpdateInput.input\\";
export { MovieUpdateManyMutationInput } from \\"./MovieUpdateManyMutationInput.input\\";
export { MovieUpdateManyWithWhereWithoutDirectorInput } from \\"./MovieUpdateManyWithWhereWithoutDirectorInput.input\\";
export { MovieUpdateManyWithoutDirectorInput } from \\"./MovieUpdateManyWithoutDirectorInput.input\\";
export { MovieUpdateWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpdateWithWhereUniqueWithoutDirectorInput.input\\";
export { MovieUpdateWithoutDirectorInput } from \\"./MovieUpdateWithoutDirectorInput.input\\";
export { MovieUpsertWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpsertWithWhereUniqueWithoutDirectorInput.input\\";
export { MovieWhereInput } from \\"./MovieWhereInput.input\\";
export { MovieWhereUniqueInput } from \\"./MovieWhereUniqueInput.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  directorFirstName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  directorLastName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  title!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  directorFirstName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  directorLastName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  title?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  rating?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieScalarWhereInput {
  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  AND?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  OR?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  NOT?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorFirstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorLastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  title?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  rating?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { DirectorRelationFilter } from \\"../inputs/DirectorRelationFilter.input\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieWhereInput {
  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  AND?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  OR?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  NOT?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorFirstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorLastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => DirectorRelationFilter, {
    nullable: true
  })
  director?: DirectorRelationFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  title?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  rating?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"../inputs/MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieWhereUniqueInput {
  @TypeGraphQL.Field(_type => MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput, {
    nullable: true
  })
  directorFirstName_directorLastName_title?: MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: index 1`] = `
"export { DirectorCreateInput } from \\"./DirectorCreateInput.input\\";
export { DirectorCreateManyInput } from \\"./DirectorCreateManyInput.input\\";
export { DirectorCreateNestedOneWithoutMoviesInput } from \\"./DirectorCreateNestedOneWithoutMoviesInput.input\\";
export { DirectorCreateOrConnectWithoutMoviesInput } from \\"./DirectorCreateOrConnectWithoutMoviesInput.input\\";
export { DirectorCreateWithoutMoviesInput } from \\"./DirectorCreateWithoutMoviesInput.input\\";
export { DirectorFirstNameLastNameCompoundUniqueInput } from \\"./DirectorFirstNameLastNameCompoundUniqueInput.input\\";
export { DirectorOrderByInput } from \\"./DirectorOrderByInput.input\\";
export { DirectorRelationFilter } from \\"./DirectorRelationFilter.input\\";
export { DirectorScalarWhereWithAggregatesInput } from \\"./DirectorScalarWhereWithAggregatesInput.input\\";
export { DirectorUpdateInput } from \\"./DirectorUpdateInput.input\\";
export { DirectorUpdateManyMutationInput } from \\"./DirectorUpdateManyMutationInput.input\\";
export { DirectorUpdateOneRequiredWithoutMoviesInput } from \\"./DirectorUpdateOneRequiredWithoutMoviesInput.input\\";
export { DirectorUpdateWithoutMoviesInput } from \\"./DirectorUpdateWithoutMoviesInput.input\\";
export { DirectorUpsertWithoutMoviesInput } from \\"./DirectorUpsertWithoutMoviesInput.input\\";
export { DirectorWhereInput } from \\"./DirectorWhereInput.input\\";
export { DirectorWhereUniqueInput } from \\"./DirectorWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { MovieCreateInput } from \\"./MovieCreateInput.input\\";
export { MovieCreateManyDirectorInput } from \\"./MovieCreateManyDirectorInput.input\\";
export { MovieCreateManyDirectorInputEnvelope } from \\"./MovieCreateManyDirectorInputEnvelope.input\\";
export { MovieCreateManyInput } from \\"./MovieCreateManyInput.input\\";
export { MovieCreateNestedManyWithoutDirectorInput } from \\"./MovieCreateNestedManyWithoutDirectorInput.input\\";
export { MovieCreateOrConnectWithoutDirectorInput } from \\"./MovieCreateOrConnectWithoutDirectorInput.input\\";
export { MovieCreateWithoutDirectorInput } from \\"./MovieCreateWithoutDirectorInput.input\\";
export { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"./MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput.input\\";
export { MovieListRelationFilter } from \\"./MovieListRelationFilter.input\\";
export { MovieOrderByInput } from \\"./MovieOrderByInput.input\\";
export { MovieScalarWhereInput } from \\"./MovieScalarWhereInput.input\\";
export { MovieScalarWhereWithAggregatesInput } from \\"./MovieScalarWhereWithAggregatesInput.input\\";
export { MovieUpdateInput } from \\"./MovieUpdateInput.input\\";
export { MovieUpdateManyMutationInput } from \\"./MovieUpdateManyMutationInput.input\\";
export { MovieUpdateManyWithWhereWithoutDirectorInput } from \\"./MovieUpdateManyWithWhereWithoutDirectorInput.input\\";
export { MovieUpdateManyWithoutDirectorInput } from \\"./MovieUpdateManyWithoutDirectorInput.input\\";
export { MovieUpdateWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpdateWithWhereUniqueWithoutDirectorInput.input\\";
export { MovieUpdateWithoutDirectorInput } from \\"./MovieUpdateWithoutDirectorInput.input\\";
export { MovieUpsertWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpsertWithWhereUniqueWithoutDirectorInput.input\\";
export { MovieWhereInput } from \\"./MovieWhereInput.input\\";
export { MovieWhereUniqueInput } from \\"./MovieWhereUniqueInput.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelCreateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelCreateInput {
  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  bigInt?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  byteA?: Buffer | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  decimal?: Prisma.Decimal | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  id?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  bigInt?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  byteA?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  decimal?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelUpdateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NullableBigIntFieldUpdateOperationsInput } from \\"../inputs/NullableBigIntFieldUpdateOperationsInput.input\\";
import { NullableBytesFieldUpdateOperationsInput } from \\"../inputs/NullableBytesFieldUpdateOperationsInput.input\\";
import { NullableDecimalFieldUpdateOperationsInput } from \\"../inputs/NullableDecimalFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelUpdateInput {
  @TypeGraphQL.Field(_type => NullableBigIntFieldUpdateOperationsInput, {
    nullable: true
  })
  bigInt?: NullableBigIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBytesFieldUpdateOperationsInput, {
    nullable: true
  })
  byteA?: NullableBytesFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDecimalFieldUpdateOperationsInput, {
    nullable: true
  })
  decimal?: NullableDecimalFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelUpdateManyMutationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NullableBigIntFieldUpdateOperationsInput } from \\"../inputs/NullableBigIntFieldUpdateOperationsInput.input\\";
import { NullableBytesFieldUpdateOperationsInput } from \\"../inputs/NullableBytesFieldUpdateOperationsInput.input\\";
import { NullableDecimalFieldUpdateOperationsInput } from \\"../inputs/NullableDecimalFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelUpdateManyMutationInput {
  @TypeGraphQL.Field(_type => NullableBigIntFieldUpdateOperationsInput, {
    nullable: true
  })
  bigInt?: NullableBigIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBytesFieldUpdateOperationsInput, {
    nullable: true
  })
  byteA?: NullableBytesFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDecimalFieldUpdateOperationsInput, {
    nullable: true
  })
  decimal?: NullableDecimalFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BigIntNullableFilter } from \\"../inputs/BigIntNullableFilter.input\\";
import { BytesNullableFilter } from \\"../inputs/BytesNullableFilter.input\\";
import { DecimalNullableFilter } from \\"../inputs/DecimalNullableFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelWhereInput {
  @TypeGraphQL.Field(_type => [NativeTypeModelWhereInput], {
    nullable: true
  })
  AND?: NativeTypeModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [NativeTypeModelWhereInput], {
    nullable: true
  })
  OR?: NativeTypeModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [NativeTypeModelWhereInput], {
    nullable: true
  })
  NOT?: NativeTypeModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  id?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => BigIntNullableFilter, {
    nullable: true
  })
  bigInt?: BigIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => BytesNullableFilter, {
    nullable: true
  })
  byteA?: BytesNullableFilter | undefined;

  @TypeGraphQL.Field(_type => DecimalNullableFilter, {
    nullable: true
  })
  decimal?: DecimalNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: NativeTypeModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NativeTypeModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  id?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with native types: index 1`] = `
"export { BigIntNullableFilter } from \\"./BigIntNullableFilter.input\\";
export { BigIntNullableWithAggregatesFilter } from \\"./BigIntNullableWithAggregatesFilter.input\\";
export { BytesNullableFilter } from \\"./BytesNullableFilter.input\\";
export { BytesNullableWithAggregatesFilter } from \\"./BytesNullableWithAggregatesFilter.input\\";
export { DecimalNullableFilter } from \\"./DecimalNullableFilter.input\\";
export { DecimalNullableWithAggregatesFilter } from \\"./DecimalNullableWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NativeTypeModelCreateInput } from \\"./NativeTypeModelCreateInput.input\\";
export { NativeTypeModelCreateManyInput } from \\"./NativeTypeModelCreateManyInput.input\\";
export { NativeTypeModelOrderByInput } from \\"./NativeTypeModelOrderByInput.input\\";
export { NativeTypeModelScalarWhereWithAggregatesInput } from \\"./NativeTypeModelScalarWhereWithAggregatesInput.input\\";
export { NativeTypeModelUpdateInput } from \\"./NativeTypeModelUpdateInput.input\\";
export { NativeTypeModelUpdateManyMutationInput } from \\"./NativeTypeModelUpdateManyMutationInput.input\\";
export { NativeTypeModelWhereInput } from \\"./NativeTypeModelWhereInput.input\\";
export { NativeTypeModelWhereUniqueInput } from \\"./NativeTypeModelWhereUniqueInput.input\\";
export { NestedBigIntNullableFilter } from \\"./NestedBigIntNullableFilter.input\\";
export { NestedBigIntNullableWithAggregatesFilter } from \\"./NestedBigIntNullableWithAggregatesFilter.input\\";
export { NestedBytesNullableFilter } from \\"./NestedBytesNullableFilter.input\\";
export { NestedBytesNullableWithAggregatesFilter } from \\"./NestedBytesNullableWithAggregatesFilter.input\\";
export { NestedDecimalNullableFilter } from \\"./NestedDecimalNullableFilter.input\\";
export { NestedDecimalNullableWithAggregatesFilter } from \\"./NestedDecimalNullableWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NullableBigIntFieldUpdateOperationsInput } from \\"./NullableBigIntFieldUpdateOperationsInput.input\\";
export { NullableBytesFieldUpdateOperationsInput } from \\"./NullableBytesFieldUpdateOperationsInput.input\\";
export { NullableDecimalFieldUpdateOperationsInput } from \\"./NullableDecimalFieldUpdateOperationsInput.input\\";
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: BoolFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  set?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: DateTimeFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  set?: Date | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: EnumColorFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { Color } from \\"../../enums/Color.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class EnumColorFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  set?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: FloatFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  set?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  increment?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  decrement?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  multiply?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  divide?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: IntFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  set?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  increment?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  decrement?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  multiply?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  divide?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BoolFieldUpdateOperationsInput } from \\"../inputs/BoolFieldUpdateOperationsInput.input\\";
import { DateTimeFieldUpdateOperationsInput } from \\"../inputs/DateTimeFieldUpdateOperationsInput.input\\";
import { EnumColorFieldUpdateOperationsInput } from \\"../inputs/EnumColorFieldUpdateOperationsInput.input\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput.input\\";
import { NullableBoolFieldUpdateOperationsInput } from \\"../inputs/NullableBoolFieldUpdateOperationsInput.input\\";
import { NullableDateTimeFieldUpdateOperationsInput } from \\"../inputs/NullableDateTimeFieldUpdateOperationsInput.input\\";
import { NullableEnumColorFieldUpdateOperationsInput } from \\"../inputs/NullableEnumColorFieldUpdateOperationsInput.input\\";
import { NullableFloatFieldUpdateOperationsInput } from \\"../inputs/NullableFloatFieldUpdateOperationsInput.input\\";
import { NullableIntFieldUpdateOperationsInput } from \\"../inputs/NullableIntFieldUpdateOperationsInput.input\\";
import { NullableStringFieldUpdateOperationsInput } from \\"../inputs/NullableStringFieldUpdateOperationsInput.input\\";
import { SampleModelUpdateintArrayFieldInput } from \\"../inputs/SampleModelUpdateintArrayFieldInput.input\\";
import { SampleModelUpdatestringArrayFieldInput } from \\"../inputs/SampleModelUpdatestringArrayFieldInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdateInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  stringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableStringFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalStringField?: NullableStringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  intField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableIntFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalIntField?: NullableIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableFloatFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalFloatField?: NullableFloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => BoolFieldUpdateOperationsInput, {
    nullable: true
  })
  booleanField?: BoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBoolFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalBooleanField?: NullableBoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => DateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  dateField?: DateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalDateField?: NullableDateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  jsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => EnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  enumField?: EnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableEnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalEnumField?: NullableEnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelUpdateintArrayFieldInput, {
    nullable: true
  })
  intArrayField?: SampleModelUpdateintArrayFieldInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelUpdatestringArrayFieldInput, {
    nullable: true
  })
  stringArrayField?: SampleModelUpdatestringArrayFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdateManyMutationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BoolFieldUpdateOperationsInput } from \\"../inputs/BoolFieldUpdateOperationsInput.input\\";
import { DateTimeFieldUpdateOperationsInput } from \\"../inputs/DateTimeFieldUpdateOperationsInput.input\\";
import { EnumColorFieldUpdateOperationsInput } from \\"../inputs/EnumColorFieldUpdateOperationsInput.input\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput.input\\";
import { NullableBoolFieldUpdateOperationsInput } from \\"../inputs/NullableBoolFieldUpdateOperationsInput.input\\";
import { NullableDateTimeFieldUpdateOperationsInput } from \\"../inputs/NullableDateTimeFieldUpdateOperationsInput.input\\";
import { NullableEnumColorFieldUpdateOperationsInput } from \\"../inputs/NullableEnumColorFieldUpdateOperationsInput.input\\";
import { NullableFloatFieldUpdateOperationsInput } from \\"../inputs/NullableFloatFieldUpdateOperationsInput.input\\";
import { NullableIntFieldUpdateOperationsInput } from \\"../inputs/NullableIntFieldUpdateOperationsInput.input\\";
import { NullableStringFieldUpdateOperationsInput } from \\"../inputs/NullableStringFieldUpdateOperationsInput.input\\";
import { SampleModelUpdateintArrayFieldInput } from \\"../inputs/SampleModelUpdateintArrayFieldInput.input\\";
import { SampleModelUpdatestringArrayFieldInput } from \\"../inputs/SampleModelUpdatestringArrayFieldInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdateManyMutationInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  stringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableStringFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalStringField?: NullableStringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  intField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableIntFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalIntField?: NullableIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableFloatFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalFloatField?: NullableFloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => BoolFieldUpdateOperationsInput, {
    nullable: true
  })
  booleanField?: BoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBoolFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalBooleanField?: NullableBoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => DateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  dateField?: DateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalDateField?: NullableDateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  jsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => EnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  enumField?: EnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableEnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalEnumField?: NullableEnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelUpdateintArrayFieldInput, {
    nullable: true
  })
  intArrayField?: SampleModelUpdateintArrayFieldInput | undefined;

  @TypeGraphQL.Field(_type => SampleModelUpdatestringArrayFieldInput, {
    nullable: true
  })
  stringArrayField?: SampleModelUpdatestringArrayFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdateintArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdateintArrayFieldInput {
  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  set?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  push?: number[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdatestringArrayFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdatestringArrayFieldInput {
  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  set?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  push?: string[] | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: StringFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  set?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolNullableFilter } from \\"./BoolNullableFilter.input\\";
export { BoolNullableWithAggregatesFilter } from \\"./BoolNullableWithAggregatesFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeNullableFilter } from \\"./DateTimeNullableFilter.input\\";
export { DateTimeNullableWithAggregatesFilter } from \\"./DateTimeNullableWithAggregatesFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { EnumColorFieldUpdateOperationsInput } from \\"./EnumColorFieldUpdateOperationsInput.input\\";
export { EnumColorFilter } from \\"./EnumColorFilter.input\\";
export { EnumColorNullableFilter } from \\"./EnumColorNullableFilter.input\\";
export { EnumColorNullableWithAggregatesFilter } from \\"./EnumColorNullableWithAggregatesFilter.input\\";
export { EnumColorWithAggregatesFilter } from \\"./EnumColorWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatNullableFilter } from \\"./FloatNullableFilter.input\\";
export { FloatNullableWithAggregatesFilter } from \\"./FloatNullableWithAggregatesFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntNullableFilter } from \\"./IntNullableFilter.input\\";
export { IntNullableListFilter } from \\"./IntNullableListFilter.input\\";
export { IntNullableWithAggregatesFilter } from \\"./IntNullableWithAggregatesFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonNullableFilter } from \\"./JsonNullableFilter.input\\";
export { JsonNullableWithAggregatesFilter } from \\"./JsonNullableWithAggregatesFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolNullableFilter } from \\"./NestedBoolNullableFilter.input\\";
export { NestedBoolNullableWithAggregatesFilter } from \\"./NestedBoolNullableWithAggregatesFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeNullableFilter } from \\"./NestedDateTimeNullableFilter.input\\";
export { NestedDateTimeNullableWithAggregatesFilter } from \\"./NestedDateTimeNullableWithAggregatesFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedEnumColorFilter } from \\"./NestedEnumColorFilter.input\\";
export { NestedEnumColorNullableFilter } from \\"./NestedEnumColorNullableFilter.input\\";
export { NestedEnumColorNullableWithAggregatesFilter } from \\"./NestedEnumColorNullableWithAggregatesFilter.input\\";
export { NestedEnumColorWithAggregatesFilter } from \\"./NestedEnumColorWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter.input\\";
export { NestedFloatNullableWithAggregatesFilter } from \\"./NestedFloatNullableWithAggregatesFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntNullableWithAggregatesFilter } from \\"./NestedIntNullableWithAggregatesFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedJsonNullableFilter } from \\"./NestedJsonNullableFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter.input\\";
export { NestedStringNullableWithAggregatesFilter } from \\"./NestedStringNullableWithAggregatesFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { NullableBoolFieldUpdateOperationsInput } from \\"./NullableBoolFieldUpdateOperationsInput.input\\";
export { NullableDateTimeFieldUpdateOperationsInput } from \\"./NullableDateTimeFieldUpdateOperationsInput.input\\";
export { NullableEnumColorFieldUpdateOperationsInput } from \\"./NullableEnumColorFieldUpdateOperationsInput.input\\";
export { NullableFloatFieldUpdateOperationsInput } from \\"./NullableFloatFieldUpdateOperationsInput.input\\";
export { NullableIntFieldUpdateOperationsInput } from \\"./NullableIntFieldUpdateOperationsInput.input\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput.input\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput.input\\";
export { SampleModelCreateManyInput } from \\"./SampleModelCreateManyInput.input\\";
export { SampleModelCreateManyintArrayFieldInput } from \\"./SampleModelCreateManyintArrayFieldInput.input\\";
export { SampleModelCreateManystringArrayFieldInput } from \\"./SampleModelCreateManystringArrayFieldInput.input\\";
export { SampleModelCreateintArrayFieldInput } from \\"./SampleModelCreateintArrayFieldInput.input\\";
export { SampleModelCreatestringArrayFieldInput } from \\"./SampleModelCreatestringArrayFieldInput.input\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput.input\\";
export { SampleModelScalarWhereWithAggregatesInput } from \\"./SampleModelScalarWhereWithAggregatesInput.input\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput.input\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput.input\\";
export { SampleModelUpdateintArrayFieldInput } from \\"./SampleModelUpdateintArrayFieldInput.input\\";
export { SampleModelUpdatestringArrayFieldInput } from \\"./SampleModelUpdatestringArrayFieldInput.input\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput.input\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringNullableFilter } from \\"./StringNullableFilter.input\\";
export { StringNullableListFilter } from \\"./StringNullableListFilter.input\\";
export { StringNullableWithAggregatesFilter } from \\"./StringNullableWithAggregatesFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: BigIntNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBigIntNullableFilter } from \\"../inputs/NestedBigIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BigIntNullableFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  equals?: bigint | undefined;

  @TypeGraphQL.Field(_type => [GraphQLScalars.BigIntResolver], {
    nullable: true
  })
  in?: bigint[] | undefined;

  @TypeGraphQL.Field(_type => [GraphQLScalars.BigIntResolver], {
    nullable: true
  })
  notIn?: bigint[] | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  lt?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  lte?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  gt?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  gte?: bigint | undefined;

  @TypeGraphQL.Field(_type => NestedBigIntNullableFilter, {
    nullable: true
  })
  not?: NestedBigIntNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: BigIntNullableWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBigIntNullableFilter } from \\"../inputs/NestedBigIntNullableFilter.input\\";
import { NestedBigIntNullableWithAggregatesFilter } from \\"../inputs/NestedBigIntNullableWithAggregatesFilter.input\\";
import { NestedFloatNullableFilter } from \\"../inputs/NestedFloatNullableFilter.input\\";
import { NestedIntNullableFilter } from \\"../inputs/NestedIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BigIntNullableWithAggregatesFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  equals?: bigint | undefined;

  @TypeGraphQL.Field(_type => [GraphQLScalars.BigIntResolver], {
    nullable: true
  })
  in?: bigint[] | undefined;

  @TypeGraphQL.Field(_type => [GraphQLScalars.BigIntResolver], {
    nullable: true
  })
  notIn?: bigint[] | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  lt?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  lte?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  gt?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  gte?: bigint | undefined;

  @TypeGraphQL.Field(_type => NestedBigIntNullableWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedBigIntNullableWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntNullableFilter, {
    nullable: true
  })
  _count?: NestedIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatNullableFilter, {
    nullable: true
  })
  _avg?: NestedFloatNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBigIntNullableFilter, {
    nullable: true
  })
  _sum?: NestedBigIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBigIntNullableFilter, {
    nullable: true
  })
  _min?: NestedBigIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBigIntNullableFilter, {
    nullable: true
  })
  _max?: NestedBigIntNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: BytesNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBytesNullableFilter } from \\"../inputs/NestedBytesNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BytesNullableFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  equals?: Buffer | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  not?: NestedBytesNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: BytesNullableWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBytesNullableFilter } from \\"../inputs/NestedBytesNullableFilter.input\\";
import { NestedBytesNullableWithAggregatesFilter } from \\"../inputs/NestedBytesNullableWithAggregatesFilter.input\\";
import { NestedIntNullableFilter } from \\"../inputs/NestedIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BytesNullableWithAggregatesFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  equals?: Buffer | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedBytesNullableWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntNullableFilter, {
    nullable: true
  })
  _count?: NestedIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  _min?: NestedBytesNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  _max?: NestedBytesNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: DecimalNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedDecimalNullableFilter } from \\"../inputs/NestedDecimalNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DecimalNullableFilter {
  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  equals?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  in?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  notIn?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  not?: NestedDecimalNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: DecimalNullableWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedDecimalNullableFilter } from \\"../inputs/NestedDecimalNullableFilter.input\\";
import { NestedDecimalNullableWithAggregatesFilter } from \\"../inputs/NestedDecimalNullableWithAggregatesFilter.input\\";
import { NestedIntNullableFilter } from \\"../inputs/NestedIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DecimalNullableWithAggregatesFilter {
  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  equals?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  in?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  notIn?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedDecimalNullableWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntNullableFilter, {
    nullable: true
  })
  _count?: NestedIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _avg?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _sum?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _min?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _max?: NestedDecimalNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NestedBytesNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedBytesNullableFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  equals?: Buffer | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  not?: NestedBytesNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NestedBytesNullableWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedBytesNullableFilter } from \\"../inputs/NestedBytesNullableFilter.input\\";
import { NestedIntNullableFilter } from \\"../inputs/NestedIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedBytesNullableWithAggregatesFilter {
  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  equals?: Buffer | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedBytesNullableWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntNullableFilter, {
    nullable: true
  })
  _count?: NestedIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  _min?: NestedBytesNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBytesNullableFilter, {
    nullable: true
  })
  _max?: NestedBytesNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NestedDecimalNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedDecimalNullableFilter {
  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  equals?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  in?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  notIn?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  not?: NestedDecimalNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NestedDecimalNullableWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { NestedDecimalNullableFilter } from \\"../inputs/NestedDecimalNullableFilter.input\\";
import { NestedIntNullableFilter } from \\"../inputs/NestedIntNullableFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedDecimalNullableWithAggregatesFilter {
  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  equals?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  in?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => [DecimalJSScalar], {
    nullable: true
  })
  notIn?: Prisma.Decimal[] | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  lte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gt?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  gte?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedDecimalNullableWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntNullableFilter, {
    nullable: true
  })
  _count?: NestedIntNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _avg?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _sum?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _min?: NestedDecimalNullableFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDecimalNullableFilter, {
    nullable: true
  })
  _max?: NestedDecimalNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NullableBigIntFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NullableBigIntFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  set?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  increment?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  decrement?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  multiply?: bigint | undefined;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  divide?: bigint | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NullableBytesFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NullableBytesFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  set?: Buffer | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: NullableDecimalFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NullableDecimalFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  set?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  increment?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  decrement?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  multiply?: Prisma.Decimal | undefined;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  divide?: Prisma.Decimal | undefined;
}
"
`;

exports[`inputs should properly generate input type scalar filters classes for model with native types: index 1`] = `
"export { BigIntNullableFilter } from \\"./BigIntNullableFilter.input\\";
export { BigIntNullableWithAggregatesFilter } from \\"./BigIntNullableWithAggregatesFilter.input\\";
export { BytesNullableFilter } from \\"./BytesNullableFilter.input\\";
export { BytesNullableWithAggregatesFilter } from \\"./BytesNullableWithAggregatesFilter.input\\";
export { DecimalNullableFilter } from \\"./DecimalNullableFilter.input\\";
export { DecimalNullableWithAggregatesFilter } from \\"./DecimalNullableWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NativeTypeModelCreateInput } from \\"./NativeTypeModelCreateInput.input\\";
export { NativeTypeModelCreateManyInput } from \\"./NativeTypeModelCreateManyInput.input\\";
export { NativeTypeModelOrderByInput } from \\"./NativeTypeModelOrderByInput.input\\";
export { NativeTypeModelScalarWhereWithAggregatesInput } from \\"./NativeTypeModelScalarWhereWithAggregatesInput.input\\";
export { NativeTypeModelUpdateInput } from \\"./NativeTypeModelUpdateInput.input\\";
export { NativeTypeModelUpdateManyMutationInput } from \\"./NativeTypeModelUpdateManyMutationInput.input\\";
export { NativeTypeModelWhereInput } from \\"./NativeTypeModelWhereInput.input\\";
export { NativeTypeModelWhereUniqueInput } from \\"./NativeTypeModelWhereUniqueInput.input\\";
export { NestedBigIntNullableFilter } from \\"./NestedBigIntNullableFilter.input\\";
export { NestedBigIntNullableWithAggregatesFilter } from \\"./NestedBigIntNullableWithAggregatesFilter.input\\";
export { NestedBytesNullableFilter } from \\"./NestedBytesNullableFilter.input\\";
export { NestedBytesNullableWithAggregatesFilter } from \\"./NestedBytesNullableWithAggregatesFilter.input\\";
export { NestedDecimalNullableFilter } from \\"./NestedDecimalNullableFilter.input\\";
export { NestedDecimalNullableWithAggregatesFilter } from \\"./NestedDecimalNullableWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NullableBigIntFieldUpdateOperationsInput } from \\"./NullableBigIntFieldUpdateOperationsInput.input\\";
export { NullableBytesFieldUpdateOperationsInput } from \\"./NullableBytesFieldUpdateOperationsInput.input\\";
export { NullableDecimalFieldUpdateOperationsInput } from \\"./NullableDecimalFieldUpdateOperationsInput.input\\";
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SampleAvgOrderByAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleAvgOrderByAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SampleCountOrderByAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleCountOrderByAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  jsonField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SampleMaxOrderByAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleMaxOrderByAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SampleMinOrderByAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleMinOrderByAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SampleOrderByWithAggregationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SampleAvgOrderByAggregateInput } from \\"../inputs/SampleAvgOrderByAggregateInput.input\\";
import { SampleCountOrderByAggregateInput } from \\"../inputs/SampleCountOrderByAggregateInput.input\\";
import { SampleMaxOrderByAggregateInput } from \\"../inputs/SampleMaxOrderByAggregateInput.input\\";
import { SampleMinOrderByAggregateInput } from \\"../inputs/SampleMinOrderByAggregateInput.input\\";
import { SampleSumOrderByAggregateInput } from \\"../inputs/SampleSumOrderByAggregateInput.input\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleOrderByWithAggregationInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  jsonField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SampleCountOrderByAggregateInput, {
    nullable: true
  })
  _count?: SampleCountOrderByAggregateInput | undefined;

  @TypeGraphQL.Field(_type => SampleAvgOrderByAggregateInput, {
    nullable: true
  })
  _avg?: SampleAvgOrderByAggregateInput | undefined;

  @TypeGraphQL.Field(_type => SampleMaxOrderByAggregateInput, {
    nullable: true
  })
  _max?: SampleMaxOrderByAggregateInput | undefined;

  @TypeGraphQL.Field(_type => SampleMinOrderByAggregateInput, {
    nullable: true
  })
  _min?: SampleMinOrderByAggregateInput | undefined;

  @TypeGraphQL.Field(_type => SampleSumOrderByAggregateInput, {
    nullable: true
  })
  _sum?: SampleSumOrderByAggregateInput | undefined;
}
"
`;

exports[`inputs when \`orderByAggregateGroup\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { JsonFilter } from \\"./JsonFilter.input\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SampleAvgOrderByAggregateInput } from \\"./SampleAvgOrderByAggregateInput.input\\";
export { SampleCountOrderByAggregateInput } from \\"./SampleCountOrderByAggregateInput.input\\";
export { SampleCreateInput } from \\"./SampleCreateInput.input\\";
export { SampleCreateManyInput } from \\"./SampleCreateManyInput.input\\";
export { SampleMaxOrderByAggregateInput } from \\"./SampleMaxOrderByAggregateInput.input\\";
export { SampleMinOrderByAggregateInput } from \\"./SampleMinOrderByAggregateInput.input\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput.input\\";
export { SampleOrderByWithAggregationInput } from \\"./SampleOrderByWithAggregationInput.input\\";
export { SampleScalarWhereWithAggregatesInput } from \\"./SampleScalarWhereWithAggregatesInput.input\\";
export { SampleSumOrderByAggregateInput } from \\"./SampleSumOrderByAggregateInput.input\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput.input\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput.input\\";
export { SampleWhereInput } from \\"./SampleWhereInput.input\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: FirstModelOrderByWithRelationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SecondModelOrderByRelationAggregateInput } from \\"../inputs/SecondModelOrderByRelationAggregateInput.input\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByWithRelationInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SecondModelOrderByRelationAggregateInput, {
    nullable: true
  })
  secondModelsField?: SecondModelOrderByRelationAggregateInput | undefined;
}
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: SecondModelOrderByRelationAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelOrderByRelationAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  _count?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by many-to-many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedManyWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedManyWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelListRelationFilter } from \\"./FirstModelListRelationFilter.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelOrderByRelationAggregateInput } from \\"./FirstModelOrderByRelationAggregateInput.input\\";
export { FirstModelOrderByWithRelationInput } from \\"./FirstModelOrderByWithRelationInput.input\\";
export { FirstModelScalarWhereInput } from \\"./FirstModelScalarWhereInput.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateManyWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelsFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelsFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelsFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelsFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelsFieldInput } from \\"./SecondModelCreateWithoutFirstModelsFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelOrderByRelationAggregateInput } from \\"./SecondModelOrderByRelationAggregateInput.input\\";
export { SecondModelOrderByWithRelationInput } from \\"./SecondModelOrderByWithRelationInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithoutFirstModelsFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by one-to-many relation fields: FirstModelOrderByWithRelationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SecondModelOrderByRelationAggregateInput } from \\"../inputs/SecondModelOrderByRelationAggregateInput.input\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByWithRelationInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SecondModelOrderByRelationAggregateInput, {
    nullable: true
  })
  secondModelsField?: SecondModelOrderByRelationAggregateInput | undefined;
}
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by one-to-many relation fields: SecondModelOrderByRelationAggregateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelOrderByRelationAggregateInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  _count?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by one-to-many relation fields: SecondModelOrderByWithRelationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelOrderByWithRelationInput } from \\"../inputs/FirstModelOrderByWithRelationInput.input\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelOrderByWithRelationInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstModelFieldId?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => FirstModelOrderByWithRelationInput, {
    nullable: true
  })
  firstModelField?: FirstModelOrderByWithRelationInput | undefined;
}
"
`;

exports[`inputs when \`orderByRelation\` preview feature is enabled should properly generate input type classes for sorting by one-to-many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedOneWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelOrderByWithRelationInput } from \\"./FirstModelOrderByWithRelationInput.input\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyFirstModelFieldInput } from \\"./SecondModelCreateManyFirstModelFieldInput.input\\";
export { SecondModelCreateManyFirstModelFieldInputEnvelope } from \\"./SecondModelCreateManyFirstModelFieldInputEnvelope.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelOrderByRelationAggregateInput } from \\"./SecondModelOrderByRelationAggregateInput.input\\";
export { SecondModelOrderByWithRelationInput } from \\"./SecondModelOrderByWithRelationInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when model field is renamed should properly generate input type classes: SampleOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  modelFieldName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: \\"asc\\" | \\"desc\\" | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs when model field is renamed should properly generate input type classes: SampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleWhereInput {
  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  AND?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  OR?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  NOT?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  modelFieldName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: StringFilter | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs when model field is renamed should properly generate input type classes: index 1`] = `
"export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SampleCreateInput } from \\"./SampleCreateInput.input\\";
export { SampleCreateManyInput } from \\"./SampleCreateManyInput.input\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput.input\\";
export { SampleScalarWhereWithAggregatesInput } from \\"./SampleScalarWhereWithAggregatesInput.input\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput.input\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput.input\\";
export { SampleWhereInput } from \\"./SampleWhereInput.input\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { RenamedSecondModelListRelationFilter } from \\"../inputs/RenamedSecondModelListRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: RenamedSecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: index 1`] = `
"export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { RenamedFirstModelCreateInput } from \\"./RenamedFirstModelCreateInput.input\\";
export { RenamedFirstModelCreateManyInput } from \\"./RenamedFirstModelCreateManyInput.input\\";
export { RenamedFirstModelCreateNestedManyWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateNestedManyWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelCreateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelListRelationFilter } from \\"./RenamedFirstModelListRelationFilter.input\\";
export { RenamedFirstModelOrderByInput } from \\"./RenamedFirstModelOrderByInput.input\\";
export { RenamedFirstModelScalarWhereInput } from \\"./RenamedFirstModelScalarWhereInput.input\\";
export { RenamedFirstModelScalarWhereWithAggregatesInput } from \\"./RenamedFirstModelScalarWhereWithAggregatesInput.input\\";
export { RenamedFirstModelUpdateInput } from \\"./RenamedFirstModelUpdateInput.input\\";
export { RenamedFirstModelUpdateManyMutationInput } from \\"./RenamedFirstModelUpdateManyMutationInput.input\\";
export { RenamedFirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpdateManyWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateManyWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpdateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelWhereInput } from \\"./RenamedFirstModelWhereInput.input\\";
export { RenamedFirstModelWhereUniqueInput } from \\"./RenamedFirstModelWhereUniqueInput.input\\";
export { RenamedSecondModelCreateInput } from \\"./RenamedSecondModelCreateInput.input\\";
export { RenamedSecondModelCreateManyInput } from \\"./RenamedSecondModelCreateManyInput.input\\";
export { RenamedSecondModelCreateNestedManyWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelCreateNestedManyWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelCreateOrConnectWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelCreateOrConnectWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelCreateWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelCreateWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelListRelationFilter } from \\"./RenamedSecondModelListRelationFilter.input\\";
export { RenamedSecondModelOrderByInput } from \\"./RenamedSecondModelOrderByInput.input\\";
export { RenamedSecondModelScalarWhereInput } from \\"./RenamedSecondModelScalarWhereInput.input\\";
export { RenamedSecondModelScalarWhereWithAggregatesInput } from \\"./RenamedSecondModelScalarWhereWithAggregatesInput.input\\";
export { RenamedSecondModelUpdateInput } from \\"./RenamedSecondModelUpdateInput.input\\";
export { RenamedSecondModelUpdateManyMutationInput } from \\"./RenamedSecondModelUpdateManyMutationInput.input\\";
export { RenamedSecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelUpdateManyWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateManyWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelUpdateWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput.input\\";
export { RenamedSecondModelWhereInput } from \\"./RenamedSecondModelWhereInput.input\\";
export { RenamedSecondModelWhereUniqueInput } from \\"./RenamedSecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { RenamedFirstModelWhereInput } from \\"../inputs/RenamedFirstModelWhereInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelRelationFilter {
  @TypeGraphQL.Field(_type => RenamedFirstModelWhereInput, {
    nullable: true
  })
  is?: RenamedFirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedFirstModelWhereInput, {
    nullable: true
  })
  isNot?: RenamedFirstModelWhereInput | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { RenamedSecondModelListRelationFilter } from \\"../inputs/RenamedSecondModelListRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: RenamedSecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelListRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { RenamedSecondModelWhereInput } from \\"../inputs/RenamedSecondModelWhereInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelListRelationFilter {
  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  every?: RenamedSecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  some?: RenamedSecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  none?: RenamedSecondModelWhereInput | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstModelFieldId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  AND?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  OR?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  NOT?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { RenamedFirstModelRelationFilter } from \\"../inputs/RenamedFirstModelRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  AND?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  OR?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedFirstModelRelationFilter, {
    nullable: true
  })
  firstModelField?: RenamedFirstModelRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { RenamedFirstModelCreateInput } from \\"./RenamedFirstModelCreateInput.input\\";
export { RenamedFirstModelCreateManyInput } from \\"./RenamedFirstModelCreateManyInput.input\\";
export { RenamedFirstModelCreateNestedOneWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateNestedOneWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelCreateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelOrderByInput } from \\"./RenamedFirstModelOrderByInput.input\\";
export { RenamedFirstModelRelationFilter } from \\"./RenamedFirstModelRelationFilter.input\\";
export { RenamedFirstModelScalarWhereWithAggregatesInput } from \\"./RenamedFirstModelScalarWhereWithAggregatesInput.input\\";
export { RenamedFirstModelUpdateInput } from \\"./RenamedFirstModelUpdateInput.input\\";
export { RenamedFirstModelUpdateManyMutationInput } from \\"./RenamedFirstModelUpdateManyMutationInput.input\\";
export { RenamedFirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateOneRequiredWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpdateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelUpsertWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpsertWithoutSecondModelsFieldInput.input\\";
export { RenamedFirstModelWhereInput } from \\"./RenamedFirstModelWhereInput.input\\";
export { RenamedFirstModelWhereUniqueInput } from \\"./RenamedFirstModelWhereUniqueInput.input\\";
export { RenamedSecondModelCreateInput } from \\"./RenamedSecondModelCreateInput.input\\";
export { RenamedSecondModelCreateManyFirstModelFieldInput } from \\"./RenamedSecondModelCreateManyFirstModelFieldInput.input\\";
export { RenamedSecondModelCreateManyFirstModelFieldInputEnvelope } from \\"./RenamedSecondModelCreateManyFirstModelFieldInputEnvelope.input\\";
export { RenamedSecondModelCreateManyInput } from \\"./RenamedSecondModelCreateManyInput.input\\";
export { RenamedSecondModelCreateNestedManyWithoutFirstModelFieldInput } from \\"./RenamedSecondModelCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelCreateOrConnectWithoutFirstModelFieldInput } from \\"./RenamedSecondModelCreateOrConnectWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelCreateWithoutFirstModelFieldInput } from \\"./RenamedSecondModelCreateWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelListRelationFilter } from \\"./RenamedSecondModelListRelationFilter.input\\";
export { RenamedSecondModelOrderByInput } from \\"./RenamedSecondModelOrderByInput.input\\";
export { RenamedSecondModelScalarWhereInput } from \\"./RenamedSecondModelScalarWhereInput.input\\";
export { RenamedSecondModelScalarWhereWithAggregatesInput } from \\"./RenamedSecondModelScalarWhereWithAggregatesInput.input\\";
export { RenamedSecondModelUpdateInput } from \\"./RenamedSecondModelUpdateInput.input\\";
export { RenamedSecondModelUpdateManyMutationInput } from \\"./RenamedSecondModelUpdateManyMutationInput.input\\";
export { RenamedSecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateManyWithWhereWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateManyWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelUpdateWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { RenamedSecondModelWhereInput } from \\"./RenamedSecondModelWhereInput.input\\";
export { RenamedSecondModelWhereUniqueInput } from \\"./RenamedSecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes: ExampleOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SortOrder } from \\"../../enums/SortOrder.enum\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intIdField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  otherId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes: ExampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { BoolFilter } from \\"../inputs/BoolFilter.input\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter.input\\";
import { FloatFilter } from \\"../inputs/FloatFilter.input\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { OtherModelRelationFilter } from \\"../inputs/OtherModelRelationFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleWhereInput {
  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  AND?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  OR?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  NOT?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intIdField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  stringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => BoolFilter, {
    nullable: true
  })
  booleanField?: BoolFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeFilter, {
    nullable: true
  })
  dateField?: DateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => OtherModelRelationFilter, {
    nullable: true
  })
  other?: OtherModelRelationFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  otherId?: IntFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes: ExampleWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  intIdField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput.input\\";
export { BoolFilter } from \\"./BoolFilter.input\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter.input\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput.input\\";
export { DateTimeFilter } from \\"./DateTimeFilter.input\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter.input\\";
export { ExampleCreateInput } from \\"./ExampleCreateInput.input\\";
export { ExampleCreateManyInput } from \\"./ExampleCreateManyInput.input\\";
export { ExampleCreateManyOtherInput } from \\"./ExampleCreateManyOtherInput.input\\";
export { ExampleCreateManyOtherInputEnvelope } from \\"./ExampleCreateManyOtherInputEnvelope.input\\";
export { ExampleCreateNestedManyWithoutOtherInput } from \\"./ExampleCreateNestedManyWithoutOtherInput.input\\";
export { ExampleCreateOrConnectWithoutOtherInput } from \\"./ExampleCreateOrConnectWithoutOtherInput.input\\";
export { ExampleCreateWithoutOtherInput } from \\"./ExampleCreateWithoutOtherInput.input\\";
export { ExampleListRelationFilter } from \\"./ExampleListRelationFilter.input\\";
export { ExampleOrderByInput } from \\"./ExampleOrderByInput.input\\";
export { ExampleScalarWhereInput } from \\"./ExampleScalarWhereInput.input\\";
export { ExampleScalarWhereWithAggregatesInput } from \\"./ExampleScalarWhereWithAggregatesInput.input\\";
export { ExampleUpdateInput } from \\"./ExampleUpdateInput.input\\";
export { ExampleUpdateManyMutationInput } from \\"./ExampleUpdateManyMutationInput.input\\";
export { ExampleUpdateManyWithWhereWithoutOtherInput } from \\"./ExampleUpdateManyWithWhereWithoutOtherInput.input\\";
export { ExampleUpdateManyWithoutOtherInput } from \\"./ExampleUpdateManyWithoutOtherInput.input\\";
export { ExampleUpdateWithWhereUniqueWithoutOtherInput } from \\"./ExampleUpdateWithWhereUniqueWithoutOtherInput.input\\";
export { ExampleUpdateWithoutOtherInput } from \\"./ExampleUpdateWithoutOtherInput.input\\";
export { ExampleUpsertWithWhereUniqueWithoutOtherInput } from \\"./ExampleUpsertWithWhereUniqueWithoutOtherInput.input\\";
export { ExampleWhereInput } from \\"./ExampleWhereInput.input\\";
export { ExampleWhereUniqueInput } from \\"./ExampleWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter.input\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter.input\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter.input\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { OtherModelCreateInput } from \\"./OtherModelCreateInput.input\\";
export { OtherModelCreateManyInput } from \\"./OtherModelCreateManyInput.input\\";
export { OtherModelCreateNestedOneWithoutSampleModelInput } from \\"./OtherModelCreateNestedOneWithoutSampleModelInput.input\\";
export { OtherModelCreateOrConnectWithoutSampleModelInput } from \\"./OtherModelCreateOrConnectWithoutSampleModelInput.input\\";
export { OtherModelCreateWithoutSampleModelInput } from \\"./OtherModelCreateWithoutSampleModelInput.input\\";
export { OtherModelOrderByInput } from \\"./OtherModelOrderByInput.input\\";
export { OtherModelRelationFilter } from \\"./OtherModelRelationFilter.input\\";
export { OtherModelScalarWhereWithAggregatesInput } from \\"./OtherModelScalarWhereWithAggregatesInput.input\\";
export { OtherModelUpdateInput } from \\"./OtherModelUpdateInput.input\\";
export { OtherModelUpdateManyMutationInput } from \\"./OtherModelUpdateManyMutationInput.input\\";
export { OtherModelUpdateOneRequiredWithoutSampleModelInput } from \\"./OtherModelUpdateOneRequiredWithoutSampleModelInput.input\\";
export { OtherModelUpdateWithoutSampleModelInput } from \\"./OtherModelUpdateWithoutSampleModelInput.input\\";
export { OtherModelUpsertWithoutSampleModelInput } from \\"./OtherModelUpsertWithoutSampleModelInput.input\\";
export { OtherModelWhereInput } from \\"./OtherModelWhereInput.input\\";
export { OtherModelWhereUniqueInput } from \\"./OtherModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when prisma client is generated into node_modules should properly generate prisma client imports in input type class files: SampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"@prisma/client\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { IntFilter } from \\"../inputs/IntFilter.input\\";
import { StringFilter } from \\"../inputs/StringFilter.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleWhereInput {
  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  AND?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  OR?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  NOT?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  modelFieldName?: StringFilter | undefined;
}
"
`;

exports[`inputs when prisma client is generated into node_modules should properly generate prisma client imports in input type class files: index 1`] = `
"export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SampleCreateInput } from \\"./SampleCreateInput.input\\";
export { SampleCreateManyInput } from \\"./SampleCreateManyInput.input\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput.input\\";
export { SampleScalarWhereWithAggregatesInput } from \\"./SampleScalarWhereWithAggregatesInput.input\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput.input\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput.input\\";
export { SampleWhereInput } from \\"./SampleWhereInput.input\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateNestedOneWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateNestedOneWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  create?: FirstModelUncheckedCreateWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelCreateOrConnectWithoutSecondModelsFieldInput, {
    nullable: true
  })
  connectOrCreate?: FirstModelCreateOrConnectWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  connect?: FirstModelWhereUniqueInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateOrConnectWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateOrConnectWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: false
  })
  where!: FirstModelWhereUniqueInput;

  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  create!: FirstModelUncheckedCreateWithoutSecondModelsFieldInput;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedCreateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput } from \\"../inputs/SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedCreateInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput, {
    nullable: true
  })
  secondModelsField?: SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedCreateWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedCreateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput.input\\";
import { SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput } from \\"../inputs/SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput, {
    nullable: true
  })
  secondModelsField?: SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateManyInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateManyInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput.input\\";
import { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedUpdateWithoutSecondModelsFieldInput.input\\";
import { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUpsertWithoutSecondModelsFieldInput.input\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  create?: FirstModelUncheckedCreateWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelCreateOrConnectWithoutSecondModelsFieldInput, {
    nullable: true
  })
  connectOrCreate?: FirstModelCreateOrConnectWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelUpsertWithoutSecondModelsFieldInput, {
    nullable: true
  })
  upsert?: FirstModelUpsertWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  connect?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelUncheckedUpdateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  update?: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpdateWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput.input\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpdateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpsertWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../../scalars\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput.input\\";
import { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedUpdateWithoutSecondModelsFieldInput.input\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpsertWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedUpdateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  update!: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput;

  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  create!: FirstModelUncheckedCreateWithoutSecondModelsFieldInput;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput.input\\";
export { FirstModelCreateManyInput } from \\"./FirstModelCreateManyInput.input\\";
export { FirstModelCreateNestedOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateNestedOneWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateOrConnectWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutSecondModelsFieldInput.input\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput.input\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter.input\\";
export { FirstModelScalarWhereWithAggregatesInput } from \\"./FirstModelScalarWhereWithAggregatesInput.input\\";
export { FirstModelUncheckedCreateInput } from \\"./FirstModelUncheckedCreateInput.input\\";
export { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"./FirstModelUncheckedCreateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUncheckedUpdateInput } from \\"./FirstModelUncheckedUpdateInput.input\\";
export { FirstModelUncheckedUpdateManyInput } from \\"./FirstModelUncheckedUpdateManyInput.input\\";
export { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUncheckedUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput.input\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput.input\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput.input\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput.input\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput.input\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput.input\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput.input\\";
export { FloatFilter } from \\"./FloatFilter.input\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter.input\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput.input\\";
export { IntFilter } from \\"./IntFilter.input\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter.input\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter.input\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter.input\\";
export { NestedIntFilter } from \\"./NestedIntFilter.input\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter.input\\";
export { NestedStringFilter } from \\"./NestedStringFilter.input\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter.input\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput.input\\";
export { SecondModelCreateManyFirstModelFieldInput } from \\"./SecondModelCreateManyFirstModelFieldInput.input\\";
export { SecondModelCreateManyFirstModelFieldInputEnvelope } from \\"./SecondModelCreateManyFirstModelFieldInputEnvelope.input\\";
export { SecondModelCreateManyInput } from \\"./SecondModelCreateManyInput.input\\";
export { SecondModelCreateNestedManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateOrConnectWithoutFirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutFirstModelFieldInput.input\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput.input\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter.input\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput.input\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput.input\\";
export { SecondModelScalarWhereWithAggregatesInput } from \\"./SecondModelScalarWhereWithAggregatesInput.input\\";
export { SecondModelUncheckedCreateInput } from \\"./SecondModelUncheckedCreateInput.input\\";
export { SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedCreateNestedManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUncheckedCreateWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedCreateWithoutFirstModelFieldInput.input\\";
export { SecondModelUncheckedUpdateInput } from \\"./SecondModelUncheckedUpdateInput.input\\";
export { SecondModelUncheckedUpdateManyInput } from \\"./SecondModelUncheckedUpdateManyInput.input\\";
export { SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUncheckedUpdateManyWithoutSecondModelsFieldInput } from \\"./SecondModelUncheckedUpdateManyWithoutSecondModelsFieldInput.input\\";
export { SecondModelUncheckedUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedUpdateWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput.input\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput.input\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput.input\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput.input\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput.input\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput.input\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput.input\\";
export { StringFilter } from \\"./StringFilter.input\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter.input\\";
"
`;
